/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\n/*==================================================\n Copyright (c) 2013-2015 司徒正美 and other contributors\n http://www.cnblogs.com/rubylouvre/\n https://github.com/RubyLouvre\n http://weibo.com/jslouvre/\n\n Released under the MIT license\n avalon.shim.js(无加载器版本) 1.4.7.1 built in 2015.11.19\n support IE6+ and other browsers\n ==================================================*/\n(function(global, factory) {\n\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        // For CommonJS and CommonJS-like environments where a proper `window`\n        // is present, execute the factory and get avalon.\n        // For environments that do not have a `window` with a `document`\n        // (such as Node.js), expose a factory as module.exports.\n        // This accentuates the need for the creation of a real `window`.\n        // e.g. var avalon = require(\"avalon\")(window);\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"Avalon requires a window with a document\")\n            }\n            return factory(w)\n        }\n    } else {\n        factory(global)\n    }\n\n// Pass this if window is not defined yet\n}(typeof window !== \"undefined\" ? window : this, function(window, noGlobal){\n\n    /*********************************************************************\n     *                    全局变量及方法                                  *\n     **********************************************************************/\n    var expose = new Date() - 0\n//http://stackoverflow.com/questions/7290086/javascript-use-strict-and-nicks-find-global-function\n    var DOC = window.document\n    var head = DOC.getElementsByTagName(\"head\")[0] //HEAD元素\n    var ifGroup = head.insertBefore(document.createElement(\"avalon\"), head.firstChild) //避免IE6 base标签BUG\n    ifGroup.innerHTML = \"X<style id='avalonStyle'>.avalonHide{ display: none!important }</style>\"\n    ifGroup.setAttribute(\"ms-skip\", \"1\")\n    ifGroup.className = \"avalonHide\"\n    var rnative = /\\[native code\\]/ //判定是否原生函数\n    function log() {\n        if (window.console && avalon.config.debug) {\n            // http://stackoverflow.com/questions/8785624/how-to-safely-wrap-console-log\n            Function.apply.call(console.log, console, arguments)\n        }\n    }\n\n\n    var subscribers = \"$\" + expose\n    var stopRepeatAssign = false\n    var rword = /[^, ]+/g //切割字符串为一个个小块，以空格或豆号分开它们，结合replace实现字符串的forEach\n    var rcomplexType = /^(?:object|array)$/\n    var rsvg = /^\\[object SVG\\w*Element\\]$/\n    var rwindow = /^\\[object (?:Window|DOMWindow|global)\\]$/\n    var oproto = Object.prototype\n    var ohasOwn = oproto.hasOwnProperty\n    var serialize = oproto.toString\n    var ap = Array.prototype\n    var aslice = ap.slice\n    var W3C = window.dispatchEvent\n    var root = DOC.documentElement\n    var avalonFragment = DOC.createDocumentFragment()\n    var cinerator = DOC.createElement(\"div\")\n    var class2type = {}\n    \"Boolean Number String Function Array Date RegExp Object Error\".replace(rword, function (name) {\n        class2type[\"[object \" + name + \"]\"] = name.toLowerCase()\n    })\n\n\n    function noop() {\n    }\n\n\n    function oneObject(array, val) {\n        if (typeof array === \"string\") {\n            array = array.match(rword) || []\n        }\n        var result = {},\n            value = val !== void 0 ? val : 1\n        for (var i = 0, n = array.length; i < n; i++) {\n            result[array[i]] = value\n        }\n        return result\n    }\n\n//生成UUID http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n    var generateID = function (prefix) {\n        prefix = prefix || \"avalon\"\n        return String(Math.random() + Math.random()).replace(/\\d\\.\\d{4}/, prefix)\n    }\n    function IE() {\n        if (window.VBArray) {\n            var mode = document.documentMode\n            return mode ? mode : window.XMLHttpRequest ? 7 : 6\n        } else {\n            return NaN\n        }\n    }\n    var IEVersion = IE()\n\n    avalon = function (el) { //创建jQuery式的无new 实例化结构\n        return new avalon.init(el)\n    }\n\n    avalon.profile = function () {\n        if (window.console && avalon.config.profile) {\n            Function.apply.call(console.log, console, arguments)\n        }\n    }\n\n    /*视浏览器情况采用最快的异步回调*/\n    avalon.nextTick = new function () {// jshint ignore:line\n        var tickImmediate = window.setImmediate\n        var tickObserver = window.MutationObserver\n        if (tickImmediate) {//IE10 \\11 edage\n            return tickImmediate.bind(window)\n        }\n\n        var queue = []\n        function callback() {\n            var n = queue.length\n            for (var i = 0; i < n; i++) {\n                queue[i]()\n            }\n            queue = queue.slice(n)\n        }\n\n        if (tickObserver) {// 支持MutationObserver\n            var node = document.createTextNode(\"avalon\")\n            new tickObserver(callback).observe(node, {characterData: true})// jshint ignore:line\n            return function (fn) {\n                queue.push(fn)\n                node.data = Math.random()\n            }\n        }\n\n        if (window.VBArray) {\n            return function (fn) {\n                queue.push(fn)\n                var node = DOC.createElement(\"script\")\n                node.onreadystatechange = function () {\n                    callback() //在interactive阶段就触发\n                    node.onreadystatechange = null\n                    head.removeChild(node)\n                    node = null\n                }\n                head.appendChild(node)\n            }\n        }\n\n\n        return function (fn) {\n            setTimeout(fn, 4)\n        }\n    }// jshint ignore:line\n    /*********************************************************************\n     *                 avalon的静态方法定义区                              *\n     **********************************************************************/\n    avalon.init = function (el) {\n        this[0] = this.element = el\n    }\n    avalon.fn = avalon.prototype = avalon.init.prototype\n\n    avalon.type = function (obj) { //取得目标的类型\n        if (obj == null) {\n            return String(obj)\n        }\n        // 早期的webkit内核浏览器实现了已废弃的ecma262v4标准，可以将正则字面量当作函数使用，因此typeof在判定正则时会返回function\n        return typeof obj === \"object\" || typeof obj === \"function\" ?\n        class2type[serialize.call(obj)] || \"object\" :\n            typeof obj\n    }\n\n    var isFunction = typeof alert === \"object\" ? function (fn) {\n        try {\n            return /^\\s*\\bfunction\\b/.test(fn + \"\")\n        } catch (e) {\n            return false\n        }\n    } : function (fn) {\n        return serialize.call(fn) === \"[object Function]\"\n    }\n    avalon.isFunction = isFunction\n\n    avalon.isWindow = function (obj) {\n        if (!obj)\n            return false\n        // 利用IE678 window == document为true,document == window竟然为false的神奇特性\n        // 标准浏览器及IE9，IE10等使用 正则检测\n        return obj == obj.document && obj.document != obj //jshint ignore:line\n    }\n\n    function isWindow(obj) {\n        return rwindow.test(serialize.call(obj))\n    }\n    if (isWindow(window)) {\n        avalon.isWindow = isWindow\n    }\n    var enu\n    for (enu in avalon({})) {\n        break\n    }\n    var enumerateBUG = enu !== \"0\" //IE6下为true, 其他为false\n    /*判定是否是一个朴素的javascript对象（Object），不是DOM对象，不是BOM对象，不是自定义类的实例*/\n    avalon.isPlainObject = function (obj, key) {\n        if (!obj || avalon.type(obj) !== \"object\" || obj.nodeType || avalon.isWindow(obj)) {\n            return false;\n        }\n        try { //IE内置对象没有constructor\n            if (obj.constructor && !ohasOwn.call(obj, \"constructor\") && !ohasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n                return false;\n            }\n        } catch (e) { //IE8 9会在这里抛错\n            return false;\n        }\n        if (enumerateBUG) {\n            for (key in obj) {\n                return ohasOwn.call(obj, key)\n            }\n        }\n        for (key in obj) {\n        }\n        return key === void 0 || ohasOwn.call(obj, key)\n    }\n    if (rnative.test(Object.getPrototypeOf)) {\n        avalon.isPlainObject = function (obj) {\n            // 简单的 typeof obj === \"object\"检测，会致使用isPlainObject(window)在opera下通不过\n            return serialize.call(obj) === \"[object Object]\" && Object.getPrototypeOf(obj) === oproto\n        }\n    }\n//与jQuery.extend方法，可用于浅拷贝，深拷贝\n    avalon.mix = avalon.fn.mix = function () {\n        var options, name, src, copy, copyIsArray, clone,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length,\n            deep = false\n\n        // 如果第一个参数为布尔,判定是否深拷贝\n        if (typeof target === \"boolean\") {\n            deep = target\n            target = arguments[1] || {}\n            i++\n        }\n\n        //确保接受方为一个复杂的数据类型\n        if (typeof target !== \"object\" && !isFunction(target)) {\n            target = {}\n        }\n\n        //如果只有一个参数，那么新成员添加于mix所在的对象上\n        if (i === length) {\n            target = this\n            i--\n        }\n\n        for (; i < length; i++) {\n            //只处理非空参数\n            if ((options = arguments[i]) != null) {\n                for (name in options) {\n                    src = target[name]\n                    try {\n                        copy = options[name] //当options为VBS对象时报错\n                    } catch (e) {\n                        continue\n                    }\n\n                    // 防止环引用\n                    if (target === copy) {\n                        continue\n                    }\n                    if (deep && copy && (avalon.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n\n                        if (copyIsArray) {\n                            copyIsArray = false\n                            clone = src && Array.isArray(src) ? src : []\n\n                        } else {\n                            clone = src && avalon.isPlainObject(src) ? src : {}\n                        }\n\n                        target[name] = avalon.mix(deep, clone, copy)\n                    } else if (copy !== void 0) {\n                        target[name] = copy\n                    }\n                }\n            }\n        }\n        return target\n    }\n\n    function _number(a, len) { //用于模拟slice, splice的效果\n        a = Math.floor(a) || 0\n        return a < 0 ? Math.max(len + a, 0) : Math.min(a, len);\n    }\n\n    avalon.mix({\n        rword: rword,\n        subscribers: subscribers,\n        version: 1.471,\n        ui: {},\n        log: log,\n        slice: W3C ? function (nodes, start, end) {\n            return aslice.call(nodes, start, end)\n        } : function (nodes, start, end) {\n            var ret = []\n            var len = nodes.length\n            if (end === void 0)\n                end = len\n            if (typeof end === \"number\" && isFinite(end)) {\n                start = _number(start, len)\n                end = _number(end, len)\n                for (var i = start; i < end; ++i) {\n                    ret[i - start] = nodes[i]\n                }\n            }\n            return ret\n        },\n        noop: noop,\n        /*如果不用Error对象封装一下，str在控制台下可能会乱码*/\n        error: function (str, e) {\n            throw  (e || Error)(str)\n        },\n        /*将一个以空格或逗号隔开的字符串或数组,转换成一个键值都为1的对象*/\n        oneObject: oneObject,\n        /* avalon.range(10)\n         => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n         avalon.range(1, 11)\n         => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n         avalon.range(0, 30, 5)\n         => [0, 5, 10, 15, 20, 25]\n         avalon.range(0, -10, -1)\n         => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n         avalon.range(0)\n         => []*/\n        range: function (start, end, step) { // 用于生成整数数组\n            step || (step = 1)\n            if (end == null) {\n                end = start || 0\n                start = 0\n            }\n            var index = -1,\n                length = Math.max(0, Math.ceil((end - start) / step)),\n                result = new Array(length)\n            while (++index < length) {\n                result[index] = start\n                start += step\n            }\n            return result\n        },\n        eventHooks: [],\n        /*绑定事件*/\n        bind: function (el, type, fn, phase) {\n            var hooks = avalon.eventHooks\n            var hook = hooks[type]\n            if (typeof hook === \"object\") {\n                type = hook.type || type\n                phase = hook.phase || !!phase\n                fn = hook.fn ? hook.fn(el,fn): fn\n            }\n            var callback = W3C ? fn : function (e) {\n                fn.call(el, fixEvent(e));\n            }\n            if (W3C) {\n                el.addEventListener(type, callback, phase)\n            } else {\n                el.attachEvent(\"on\" + type, callback)\n            }\n            return callback\n        },\n        /*卸载事件*/\n        unbind: function (el, type, fn, phase) {\n            var hooks = avalon.eventHooks\n            var hook = hooks[type]\n            var callback = fn || noop\n            if (typeof hook === \"object\") {\n                type = hook.type || type\n                phase = hook.phase || !!phase\n            }\n            if (W3C) {\n                el.removeEventListener(type, callback, phase)\n            } else {\n                el.detachEvent(\"on\" + type, callback)\n            }\n        },\n        /*读写删除元素节点的样式*/\n        css: function (node, name, value) {\n            if (node instanceof avalon) {\n                node = node[0]\n            }\n            var prop = /[_-]/.test(name) ? camelize(name) : name, fn\n            name = avalon.cssName(prop) || prop\n            if (value === void 0 || typeof value === \"boolean\") { //获取样式\n                fn = cssHooks[prop + \":get\"] || cssHooks[\"@:get\"]\n                if (name === \"background\") {\n                    name = \"backgroundColor\"\n                }\n                var val = fn(node, name)\n                return value === true ? parseFloat(val) || 0 : val\n            } else if (value === \"\") { //请除样式\n                node.style[name] = \"\"\n            } else { //设置样式\n                if (value == null || value !== value) {\n                    return\n                }\n                if (isFinite(value) && !avalon.cssNumber[prop]) {\n                    value += \"px\"\n                }\n                fn = cssHooks[prop + \":set\"] || cssHooks[\"@:set\"]\n                fn(node, name, value)\n            }\n        },\n        /*遍历数组与对象,回调的第一个参数为索引或键名,第二个或元素或键值*/\n        each: function (obj, fn) {\n            if (obj) { //排除null, undefined\n                var i = 0\n                if (isArrayLike(obj)) {\n                    for (var n = obj.length; i < n; i++) {\n                        if (fn(i, obj[i]) === false)\n                            break\n                    }\n                } else {\n                    for (i in obj) {\n                        if (obj.hasOwnProperty(i) && fn(i, obj[i]) === false) {\n                            break\n                        }\n                    }\n                }\n            }\n        },\n        //收集元素的data-{{prefix}}-*属性，并转换为对象\n        getWidgetData: function (elem, prefix) {\n            var raw = avalon(elem).data()\n            var result = {}\n            for (var i in raw) {\n                if (i.indexOf(prefix) === 0) {\n                    result[i.replace(prefix, \"\").replace(/\\w/, function (a) {\n                        return a.toLowerCase()\n                    })] = raw[i]\n                }\n            }\n            return result\n        },\n        Array: {\n            /*只有当前数组不存在此元素时只添加它*/\n            ensure: function (target, item) {\n                if (target.indexOf(item) === -1) {\n                    return target.push(item)\n                }\n            },\n            /*移除数组中指定位置的元素，返回布尔表示成功与否*/\n            removeAt: function (target, index) {\n                return !!target.splice(index, 1).length\n            },\n            /*移除数组中第一个匹配传参的那个元素，返回布尔表示成功与否*/\n            remove: function (target, item) {\n                var index = target.indexOf(item)\n                if (~index)\n                    return avalon.Array.removeAt(target, index)\n                return false\n            }\n        }\n    })\n\n    var bindingHandlers = avalon.bindingHandlers = {}\n    var bindingExecutors = avalon.bindingExecutors = {}\n\n    /*判定是否类数组，如节点集合，纯数组，arguments与拥有非负整数的length属性的纯JS对象*/\n    function isArrayLike(obj) {\n        if (!obj)\n            return false\n        var n = obj.length\n        if (n === (n >>> 0)) { //检测length属性是否为非负整数\n            var type = serialize.call(obj).slice(8, -1)\n            if (/(?:regexp|string|function|window|global)$/i.test(type))\n                return false\n            if (type === \"Array\")\n                return true\n            try {\n                if ({}.propertyIsEnumerable.call(obj, \"length\") === false) { //如果是原生对象\n                    return  /^\\s?function/.test(obj.item || obj.callee)\n                }\n                return true\n            } catch (e) { //IE的NodeList直接抛错\n                return !obj.window //IE6-8 window\n            }\n        }\n        return false\n    }\n\n\n// https://github.com/rsms/js-lru\n    var Cache = new function() {// jshint ignore:line\n        function LRU(maxLength) {\n            this.size = 0\n            this.limit = maxLength\n            this.head = this.tail = void 0\n            this._keymap = {}\n        }\n\n        var p = LRU.prototype\n\n        p.put = function(key, value) {\n            var entry = {\n                key: key,\n                value: value\n            }\n            this._keymap[key] = entry\n            if (this.tail) {\n                this.tail.newer = entry\n                entry.older = this.tail\n            } else {\n                this.head = entry\n            }\n            this.tail = entry\n            if (this.size === this.limit) {\n                this.shift()\n            } else {\n                this.size++\n            }\n            return value\n        }\n\n        p.shift = function() {\n            var entry = this.head\n            if (entry) {\n                this.head = this.head.newer\n                this.head.older =\n                    entry.newer =\n                        entry.older =\n                            this._keymap[entry.key] = void 0\n                delete this._keymap[entry.key] //#1029\n            }\n        }\n        p.get = function(key) {\n            var entry = this._keymap[key]\n            if (entry === void 0)\n                return\n            if (entry === this.tail) {\n                return  entry.value\n            }\n            // HEAD--------------TAIL\n            //   <.older   .newer>\n            //  <--- add direction --\n            //   A  B  C  <D>  E\n            if (entry.newer) {\n                if (entry === this.head) {\n                    this.head = entry.newer\n                }\n                entry.newer.older = entry.older // C <-- E.\n            }\n            if (entry.older) {\n                entry.older.newer = entry.newer // C. --> E\n            }\n            entry.newer = void 0 // D --x\n            entry.older = this.tail // D. --> E\n            if (this.tail) {\n                this.tail.newer = entry // E. <-- D\n            }\n            this.tail = entry\n            return entry.value\n        }\n        return LRU\n    }// jshint ignore:line\n\n    /*********************************************************************\n     *                         javascript 底层补丁                       *\n     **********************************************************************/\n    if (!\"司徒正美\".trim) {\n        var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g\n        String.prototype.trim = function () {\n            return this.replace(rtrim, \"\")\n        }\n    }\n    var hasDontEnumBug = !({\n            'toString': null\n        }).propertyIsEnumerable('toString'),\n        hasProtoEnumBug = (function () {\n        }).propertyIsEnumerable('prototype'),\n        dontEnums = [\n            \"toString\",\n            \"toLocaleString\",\n            \"valueOf\",\n            \"hasOwnProperty\",\n            \"isPrototypeOf\",\n            \"propertyIsEnumerable\",\n            \"constructor\"\n        ],\n        dontEnumsLength = dontEnums.length;\n    if (!Object.keys) {\n        Object.keys = function (object) { //ecma262v5 15.2.3.14\n            var theKeys = []\n            var skipProto = hasProtoEnumBug && typeof object === \"function\"\n            if (typeof object === \"string\" || (object && object.callee)) {\n                for (var i = 0; i < object.length; ++i) {\n                    theKeys.push(String(i))\n                }\n            } else {\n                for (var name in object) {\n                    if (!(skipProto && name === \"prototype\") && ohasOwn.call(object, name)) {\n                        theKeys.push(String(name))\n                    }\n                }\n            }\n\n            if (hasDontEnumBug) {\n                var ctor = object.constructor,\n                    skipConstructor = ctor && ctor.prototype === object\n                for (var j = 0; j < dontEnumsLength; j++) {\n                    var dontEnum = dontEnums[j]\n                    if (!(skipConstructor && dontEnum === \"constructor\") && ohasOwn.call(object, dontEnum)) {\n                        theKeys.push(dontEnum)\n                    }\n                }\n            }\n            return theKeys\n        }\n    }\n    if (!Array.isArray) {\n        Array.isArray = function (a) {\n            return serialize.call(a) === \"[object Array]\"\n        }\n    }\n\n    if (!noop.bind) {\n        Function.prototype.bind = function (scope) {\n            if (arguments.length < 2 && scope === void 0)\n                return this\n            var fn = this,\n                argv = arguments\n            return function () {\n                var args = [],\n                    i\n                for (i = 1; i < argv.length; i++)\n                    args.push(argv[i])\n                for (i = 0; i < arguments.length; i++)\n                    args.push(arguments[i])\n                return fn.apply(scope, args)\n            }\n        }\n    }\n\n    function iterator(vars, body, ret) {\n        var fun = 'for(var ' + vars + 'i=0,n = this.length; i < n; i++){' + body.replace('_', '((i in this) && fn.call(scope,this[i],i,this))') + '}' + ret\n        /* jshint ignore:start */\n        return Function(\"fn,scope\", fun)\n        /* jshint ignore:end */\n    }\n    if (!rnative.test([].map)) {\n        avalon.mix(ap, {\n            //定位操作，返回数组中第一个等于给定参数的元素的索引值。\n            indexOf: function (item, index) {\n                var n = this.length,\n                    i = ~~index\n                if (i < 0)\n                    i += n\n                for (; i < n; i++)\n                    if (this[i] === item)\n                        return i\n                return -1\n            },\n            //定位操作，同上，不过是从后遍历。\n            lastIndexOf: function (item, index) {\n                var n = this.length,\n                    i = index == null ? n - 1 : index\n                if (i < 0)\n                    i = Math.max(0, n + i)\n                for (; i >= 0; i--)\n                    if (this[i] === item)\n                        return i\n                return -1\n            },\n            //迭代操作，将数组的元素挨个儿传入一个函数中执行。Prototype.js的对应名字为each。\n            forEach: iterator(\"\", '_', \"\"),\n            //迭代类 在数组中的每个项上运行一个函数，如果此函数的值为真，则此元素作为新数组的元素收集起来，并返回新数组\n            filter: iterator('r=[],j=0,', 'if(_)r[j++]=this[i]', 'return r'),\n            //收集操作，将数组的元素挨个儿传入一个函数中执行，然后把它们的返回值组成一个新数组返回。Prototype.js的对应名字为collect。\n            map: iterator('r=[],', 'r[i]=_', 'return r'),\n            //只要数组中有一个元素满足条件（放进给定函数返回true），那么它就返回true。Prototype.js的对应名字为any。\n            some: iterator(\"\", 'if(_)return true', 'return false'),\n            //只有数组中的元素都满足条件（放进给定函数返回true），它才返回true。Prototype.js的对应名字为all。\n            every: iterator(\"\", 'if(!_)return false', 'return true')\n        })\n    }\n    /*********************************************************************\n     *                           DOM 底层补丁                             *\n     **********************************************************************/\n\n    function fixContains(root, el) {\n        try { //IE6-8,游离于DOM树外的文本节点，访问parentNode有时会抛错\n            while ((el = el.parentNode))\n                if (el === root)\n                    return true\n            return false\n        } catch (e) {\n            return false\n        }\n    }\n    avalon.contains = fixContains\n//IE6-11的文档对象没有contains\n    if (!DOC.contains) {\n        DOC.contains = function (b) {\n            return fixContains(DOC, b)\n        }\n    }\n\n    function outerHTML() {\n        return new XMLSerializer().serializeToString(this)\n    }\n\n    if (window.SVGElement) {\n        //safari5+是把contains方法放在Element.prototype上而不是Node.prototype\n        if (!DOC.createTextNode(\"x\").contains) {\n            Node.prototype.contains = function (arg) {//IE6-8没有Node对象\n                return !!(this.compareDocumentPosition(arg) & 16)\n            }\n        }\n        var svgns = \"http://www.w3.org/2000/svg\"\n        var svg = DOC.createElementNS(svgns, \"svg\")\n        svg.innerHTML = '<circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"red\" />'\n        if (!rsvg.test(svg.firstChild)) { // #409\n            function enumerateNode(node, targetNode) {// jshint ignore:line\n                if (node && node.childNodes) {\n                    var nodes = node.childNodes\n                    for (var i = 0, el; el = nodes[i++]; ) {\n                        if (el.tagName) {\n                            var svg = DOC.createElementNS(svgns,\n                                el.tagName.toLowerCase())\n                            ap.forEach.call(el.attributes, function (attr) {\n                                svg.setAttribute(attr.name, attr.value) //复制属性\n                            })// jshint ignore:line\n                            // 递归处理子节点\n                            enumerateNode(el, svg)\n                            targetNode.appendChild(svg)\n                        }\n                    }\n                }\n            }\n            Object.defineProperties(SVGElement.prototype, {\n                \"outerHTML\": {//IE9-11,firefox不支持SVG元素的innerHTML,outerHTML属性\n                    enumerable: true,\n                    configurable: true,\n                    get: outerHTML,\n                    set: function (html) {\n                        var tagName = this.tagName.toLowerCase(),\n                            par = this.parentNode,\n                            frag = avalon.parseHTML(html)\n                        // 操作的svg，直接插入\n                        if (tagName === \"svg\") {\n                            par.insertBefore(frag, this)\n                            // svg节点的子节点类似\n                        } else {\n                            var newFrag = DOC.createDocumentFragment()\n                            enumerateNode(frag, newFrag)\n                            par.insertBefore(newFrag, this)\n                        }\n                        par.removeChild(this)\n                    }\n                },\n                \"innerHTML\": {\n                    enumerable: true,\n                    configurable: true,\n                    get: function () {\n                        var s = this.outerHTML\n                        var ropen = new RegExp(\"<\" + this.nodeName + '\\\\b(?:([\"\\'])[^\"]*?(\\\\1)|[^>])*>', \"i\")\n                        var rclose = new RegExp(\"<\\/\" + this.nodeName + \">$\", \"i\")\n                        return s.replace(ropen, \"\").replace(rclose, \"\")\n                    },\n                    set: function (html) {\n                        if (avalon.clearHTML) {\n                            avalon.clearHTML(this)\n                            var frag = avalon.parseHTML(html)\n                            enumerateNode(frag, this)\n                        }\n                    }\n                }\n            })\n        }\n    }\n    if (!root.outerHTML && window.HTMLElement) { //firefox 到11时才有outerHTML\n        HTMLElement.prototype.__defineGetter__(\"outerHTML\", outerHTML);\n    }\n\n\n//============================= event binding =======================\n    var rmouseEvent = /^(?:mouse|contextmenu|drag)|click/\n    function fixEvent(event) {\n        var ret = {}\n        for (var i in event) {\n            ret[i] = event[i]\n        }\n        var target = ret.target = event.srcElement\n        if (event.type.indexOf(\"key\") === 0) {\n            ret.which = event.charCode != null ? event.charCode : event.keyCode\n        } else if (rmouseEvent.test(event.type)) {\n            var doc = target.ownerDocument || DOC\n            var box = doc.compatMode === \"BackCompat\" ? doc.body : doc.documentElement\n            ret.pageX = event.clientX + (box.scrollLeft >> 0) - (box.clientLeft >> 0)\n            ret.pageY = event.clientY + (box.scrollTop >> 0) - (box.clientTop >> 0)\n            ret.wheelDeltaY = ret.wheelDelta\n            ret.wheelDeltaX = 0\n        }\n        ret.timeStamp = new Date() - 0\n        ret.originalEvent = event\n        ret.preventDefault = function () { //阻止默认行为\n            event.returnValue = false\n        }\n        ret.stopPropagation = function () { //阻止事件在DOM树中的传播\n            event.cancelBubble = true\n        }\n        return ret\n    }\n\n    var eventHooks = avalon.eventHooks\n//针对firefox, chrome修正mouseenter, mouseleave\n    if (!(\"onmouseenter\" in root)) {\n        avalon.each({\n            mouseenter: \"mouseover\",\n            mouseleave: \"mouseout\"\n        }, function (origType, fixType) {\n            eventHooks[origType] = {\n                type: fixType,\n                fn: function (elem, fn) {\n                    return function (e) {\n                        var t = e.relatedTarget\n                        if (!t || (t !== elem && !(elem.compareDocumentPosition(t) & 16))) {\n                            delete e.type\n                            e.type = origType\n                            return fn.call(elem, e)\n                        }\n                    }\n                }\n            }\n        })\n    }\n//针对IE9+, w3c修正animationend\n    avalon.each({\n        AnimationEvent: \"animationend\",\n        WebKitAnimationEvent: \"webkitAnimationEnd\"\n    }, function (construct, fixType) {\n        if (window[construct] && !eventHooks.animationend) {\n            eventHooks.animationend = {\n                type: fixType\n            }\n        }\n    })\n//针对IE6-8修正input\n    if (!(\"oninput\" in DOC.createElement(\"input\"))) {\n        eventHooks.input = {\n            type: \"propertychange\",\n            fn: function (elem, fn) {\n                return function (e) {\n                    if (e.propertyName === \"value\") {\n                        e.type = \"input\"\n                        return fn.call(elem, e)\n                    }\n                }\n            }\n        }\n    }\n    if (DOC.onmousewheel === void 0) {\n        /* IE6-11 chrome mousewheel wheelDetla 下 -120 上 120\n         firefox DOMMouseScroll detail 下3 上-3\n         firefox wheel detlaY 下3 上-3\n         IE9-11 wheel deltaY 下40 上-40\n         chrome wheel deltaY 下100 上-100 */\n        var fixWheelType = DOC.onwheel !== void 0 ? \"wheel\" : \"DOMMouseScroll\"\n        var fixWheelDelta = fixWheelType === \"wheel\" ? \"deltaY\" : \"detail\"\n        eventHooks.mousewheel = {\n            type: fixWheelType,\n            fn: function (elem, fn) {\n                return function (e) {\n                    e.wheelDeltaY = e.wheelDelta = e[fixWheelDelta] > 0 ? -120 : 120\n                    e.wheelDeltaX = 0\n                    if (Object.defineProperty) {\n                        Object.defineProperty(e, \"type\", {\n                            value: \"mousewheel\"\n                        })\n                    }\n                    fn.call(elem, e)\n                }\n            }\n        }\n    }\n\n\n\n    /*********************************************************************\n     *                           配置系统                                 *\n     **********************************************************************/\n\n    function kernel(settings) {\n        for (var p in settings) {\n            if (!ohasOwn.call(settings, p))\n                continue\n            var val = settings[p]\n            if (typeof kernel.plugins[p] === \"function\") {\n                kernel.plugins[p](val)\n            } else if (typeof kernel[p] === \"object\") {\n                avalon.mix(kernel[p], val)\n            } else {\n                kernel[p] = val\n            }\n        }\n        return this\n    }\n    var openTag, closeTag, rexpr, rexprg, rbind, rregexp = /[-.*+?^${}()|[\\]\\/\\\\]/g\n\n    function escapeRegExp(target) {\n        //http://stevenlevithan.com/regex/xregexp/\n        //将字符串安全格式化为正则表达式的源码\n        return (target + \"\").replace(rregexp, \"\\\\$&\")\n    }\n\n    var plugins = {\n\n        interpolate: function (array) {\n            openTag = array[0]\n            closeTag = array[1]\n            if (openTag === closeTag) {\n                throw new SyntaxError(\"openTag===closeTag\")\n            } else {\n                var test = openTag + \"test\" + closeTag\n                cinerator.innerHTML = test\n                if (cinerator.innerHTML !== test && cinerator.innerHTML.indexOf(\"&lt;\") > -1) {\n                    throw new SyntaxError(\"此定界符不合法\")\n                }\n                kernel.openTag = openTag\n                kernel.closeTag = closeTag\n                cinerator.innerHTML = \"\"\n            }\n            var o = escapeRegExp(openTag),\n                c = escapeRegExp(closeTag)\n            rexpr = new RegExp(o + \"(.*?)\" + c)\n            rexprg = new RegExp(o + \"(.*?)\" + c, \"g\")\n            rbind = new RegExp(o + \".*?\" + c + \"|\\\\sms-\")\n        }\n    }\n\n    kernel.debug = true\n    kernel.plugins = plugins\n    kernel.plugins['interpolate']([\"{{\", \"}}\"])\n    kernel.paths = {}\n    kernel.shim = {}\n    kernel.maxRepeatSize = 100\n    avalon.config = kernel\n    var ravalon = /(\\w+)\\[(avalonctrl)=\"(\\S+)\"\\]/\n    var findNodes = DOC.querySelectorAll ? function(str) {\n        return DOC.querySelectorAll(str)\n    } : function(str) {\n        var match = str.match(ravalon)\n        var all = DOC.getElementsByTagName(match[1])\n        var nodes = []\n        for (var i = 0, el; el = all[i++]; ) {\n            if (el.getAttribute(match[2]) === match[3]) {\n                nodes.push(el)\n            }\n        }\n        return nodes\n    }\n    /*********************************************************************\n     *                            事件总线                               *\n     **********************************************************************/\n    var EventBus = {\n        $watch: function (type, callback) {\n            if (typeof callback === \"function\") {\n                var callbacks = this.$events[type]\n                if (callbacks) {\n                    callbacks.push(callback)\n                } else {\n                    this.$events[type] = [callback]\n                }\n            } else { //重新开始监听此VM的第一重简单属性的变动\n                this.$events = this.$watch.backup\n            }\n            return this\n        },\n        $unwatch: function (type, callback) {\n            var n = arguments.length\n            if (n === 0) { //让此VM的所有$watch回调无效化\n                this.$watch.backup = this.$events\n                this.$events = {}\n            } else if (n === 1) {\n                this.$events[type] = []\n            } else {\n                var callbacks = this.$events[type] || []\n                var i = callbacks.length\n                while (~--i < 0) {\n                    if (callbacks[i] === callback) {\n                        return callbacks.splice(i, 1)\n                    }\n                }\n            }\n            return this\n        },\n        $fire: function (type) {\n            var special, i, v, callback\n            if (/^(\\w+)!(\\S+)$/.test(type)) {\n                special = RegExp.$1\n                type = RegExp.$2\n            }\n            var events = this.$events\n            if (!events)\n                return\n            var args = aslice.call(arguments, 1)\n            var detail = [type].concat(args)\n            if (special === \"all\") {\n                for (i in avalon.vmodels) {\n                    v = avalon.vmodels[i]\n                    if (v !== this) {\n                        v.$fire.apply(v, detail)\n                    }\n                }\n            } else if (special === \"up\" || special === \"down\") {\n                var elements = events.expr ? findNodes(events.expr) : []\n                if (elements.length === 0)\n                    return\n                for (i in avalon.vmodels) {\n                    v = avalon.vmodels[i]\n                    if (v !== this) {\n                        if (v.$events.expr) {\n                            var eventNodes = findNodes(v.$events.expr)\n                            if (eventNodes.length === 0) {\n                                continue\n                            }\n                            //循环两个vmodel中的节点，查找匹配（向上匹配或者向下匹配）的节点并设置标识\n                            /* jshint ignore:start */\n                            ap.forEach.call(eventNodes, function (node) {\n                                ap.forEach.call(elements, function (element) {\n                                    var ok = special === \"down\" ? element.contains(node) : //向下捕获\n                                        node.contains(element) //向上冒泡\n                                    if (ok) {\n                                        node._avalon = v //符合条件的加一个标识\n                                    }\n                                });\n                            })\n                            /* jshint ignore:end */\n                        }\n                    }\n                }\n                var nodes = DOC.getElementsByTagName(\"*\") //实现节点排序\n                var alls = []\n                ap.forEach.call(nodes, function (el) {\n                    if (el._avalon) {\n                        alls.push(el._avalon)\n                        el._avalon = \"\"\n                        el.removeAttribute(\"_avalon\")\n                    }\n                })\n                if (special === \"up\") {\n                    alls.reverse()\n                }\n                for (i = 0; callback = alls[i++]; ) {\n                    if (callback.$fire.apply(callback, detail) === false) {\n                        break\n                    }\n                }\n            } else {\n                var callbacks = events[type] || []\n                var all = events.$all || []\n                for (i = 0; callback = callbacks[i++]; ) {\n                    if (isFunction(callback))\n                        callback.apply(this, args)\n                }\n                for (i = 0; callback = all[i++]; ) {\n                    if (isFunction(callback))\n                        callback.apply(this, arguments)\n                }\n            }\n        }\n    }\n    /*********************************************************************\n     *                           modelFactory                             *\n     **********************************************************************/\n//avalon最核心的方法的两个方法之一（另一个是avalon.scan），返回一个ViewModel(VM)\n    var VMODELS = avalon.vmodels = {} //所有vmodel都储存在这里\n    avalon.define = function (id, factory) {\n        var $id = id.$id || id\n        if (!$id) {\n            log(\"warning: vm必须指定$id\")\n        }\n        if (VMODELS[$id]) {\n            log(\"warning: \" + $id + \" 已经存在于avalon.vmodels中\")\n        }\n        if (typeof id === \"object\") {\n            var model = modelFactory(id)\n        } else {\n            var scope = {\n                $watch: noop\n            }\n            factory(scope) //得到所有定义\n\n            model = modelFactory(scope) //偷天换日，将scope换为model\n            stopRepeatAssign = true\n            factory(model)\n            stopRepeatAssign = false\n        }\n        model.$id = $id\n        return VMODELS[$id] = model\n    }\n\n//一些不需要被监听的属性\n    var $$skipArray = String(\"$id,$watch,$unwatch,$fire,$events,$model,$skipArray,$reinitialize\").match(rword)\n    var defineProperty = Object.defineProperty\n    var canHideOwn = true\n//如果浏览器不支持ecma262v5的Object.defineProperties或者存在BUG，比如IE8\n//标准浏览器使用__defineGetter__, __defineSetter__实现\n    try {\n        defineProperty({}, \"_\", {\n            value: \"x\"\n        })\n        var defineProperties = Object.defineProperties\n    } catch (e) {\n        canHideOwn = false\n    }\n\n    function modelFactory(source, $special, $model) {\n        if (Array.isArray(source)) {\n            var arr = source.concat()\n            source.length = 0\n            var collection = arrayFactory(source)\n            collection.pushArray(arr)\n            return collection\n        }\n        //0 null undefined || Node || VModel(fix IE6-8 createWithProxy $val: val引发的BUG)\n        if (!source || (source.$id && source.$events) || (source.nodeType > 0 && source.nodeName) ) {\n            return source\n        }\n        var $skipArray = Array.isArray(source.$skipArray) ? source.$skipArray : []\n        $skipArray.$special = $special || {} //强制要监听的属性\n        var $vmodel = {} //要返回的对象, 它在IE6-8下可能被偷龙转凤\n        $model = $model || {} //vmodels.$model属性\n        var $events = {} //vmodel.$events属性\n        var accessors = {} //监控属性\n        var computed = []\n        $$skipArray.forEach(function (name) {\n            delete source[name]\n        })\n        var names = Object.keys(source)\n        /* jshint ignore:start */\n        names.forEach(function (name, accessor) {\n            var val = source[name]\n            $model[name] = val\n            if (isObservable(name, val, $skipArray)) {\n                //总共产生三种accessor\n                $events[name] = []\n                var valueType = avalon.type(val)\n                //总共产生三种accessor\n                if (valueType === \"object\" && isFunction(val.get) && Object.keys(val).length <= 2) {\n                    accessor = makeComputedAccessor(name, val)\n                    computed.push(accessor)\n                } else if (rcomplexType.test(valueType)) {\n                    // issue #940 解决$model层次依赖丢失 https://github.com/RubyLouvre/avalon/issues/940\n                    //  $model[name] = {}\n                    accessor = makeComplexAccessor(name, val, valueType, $events[name], $model)\n                } else {\n                    accessor = makeSimpleAccessor(name, val)\n                }\n                accessors[name] = accessor\n            }\n        })\n        /* jshint ignore:end */\n        $vmodel = defineProperties($vmodel, descriptorFactory(accessors), source) //生成一个空的ViewModel\n        for (var i = 0; i < names.length; i++) {\n            var name = names[i]\n            if (!accessors[name]) {\n                $vmodel[name] = source[name]\n            }\n        }\n        //添加$id, $model, $events, $watch, $unwatch, $fire\n        hideProperty($vmodel, \"$id\", generateID())\n        hideProperty($vmodel, \"$model\", $model)\n        hideProperty($vmodel, \"$events\", $events)\n        /* jshint ignore:start */\n        if (canHideOwn) {\n            hideProperty($vmodel, \"hasOwnProperty\", function (name) {\n                return name in $vmodel.$model\n            })\n        } else {\n            $vmodel.hasOwnProperty = function (name) {\n                return (name in $vmodel.$model) && (name !== \"hasOwnProperty\")\n            }\n        }\n        /* jshint ignore:end */\n        for ( i in EventBus) {\n            hideProperty($vmodel, i, EventBus[i].bind($vmodel))\n        }\n\n        $vmodel.$reinitialize = function () {\n            computed.forEach(function (accessor) {\n                delete accessor._value\n                delete accessor.oldArgs\n                accessor.digest = function () {\n                    accessor.call($vmodel)\n                }\n                dependencyDetection.begin({\n                    callback: function (vm, dependency) {//dependency为一个accessor\n                        var name = dependency._name\n                        if (dependency !== accessor) {\n                            var list = vm.$events[name]\n                            injectDependency(list, accessor.digest)\n                        }\n                    }\n                })\n                try {\n                    accessor.get.call($vmodel)\n                } finally {\n                    dependencyDetection.end()\n                }\n            })\n        }\n        $vmodel.$reinitialize()\n        return $vmodel\n    }\n\n\n    function hideProperty(host, name, value) {\n        if (canHideOwn) {\n            Object.defineProperty(host, name, {\n                value: value,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            })\n        } else {\n            host[name] = value\n        }\n    }\n//创建一个简单访问器\n    function makeSimpleAccessor(name, value) {\n        function accessor(value) {\n            var oldValue = accessor._value\n            if (arguments.length > 0) {\n                if (!stopRepeatAssign && !isEqual(value, oldValue)) {\n                    accessor.updateValue(this, value)\n                    accessor.notify(this, value, oldValue)\n                }\n                return this\n            } else {\n                dependencyDetection.collectDependency(this, accessor)\n                return oldValue\n            }\n        }\n        accessorFactory(accessor, name)\n        accessor._value = value\n        return accessor;\n    }\n\n//创建一个计算访问器\n    function makeComputedAccessor(name, options) {\n        function accessor(value) {//计算属性\n            var oldValue = accessor._value\n            var init = (\"_value\" in accessor)\n            if (arguments.length > 0) {\n                if (stopRepeatAssign) {\n                    return this\n                }\n                if (typeof accessor.set === \"function\") {\n                    if (accessor.oldArgs !== value) {\n                        accessor.oldArgs = value\n                        var $events = this.$events\n                        var lock = $events[name]\n                        $events[name] = [] //清空回调，防止内部冒泡而触发多次$fire\n                        accessor.set.call(this, value)\n                        $events[name] = lock\n                        value = accessor.get.call(this)\n                        if (value !== oldValue) {\n                            accessor.updateValue(this, value)\n                            accessor.notify(this, value, oldValue) //触发$watch回调\n                        }\n                    }\n                }\n                return this\n            } else {\n                //将依赖于自己的高层访问器或视图刷新函数（以绑定对象形式）放到自己的订阅数组中\n                //将自己注入到低层访问器的订阅数组中\n                value = accessor.get.call(this)\n                accessor.updateValue(this, value)\n                if (init && oldValue !== value) {\n                    accessor.notify(this, value, oldValue) //触发$watch回调\n                }\n                return value\n            }\n        }\n        accessor.set = options.set\n        accessor.get = options.get\n        accessorFactory(accessor, name)\n        return accessor\n    }\n\n//创建一个复杂访问器\n    function makeComplexAccessor(name, initValue, valueType, list, parentModel) {\n\n        function accessor(value) {\n            var oldValue = accessor._value\n\n            var son = accessor._vmodel\n            if (arguments.length > 0) {\n                if (stopRepeatAssign) {\n                    return this\n                }\n                if (valueType === \"array\") {\n                    var a = son, b = value,\n                        an = a.length,\n                        bn = b.length\n                    a.$lock = true\n                    if (an > bn) {\n                        a.splice(bn, an - bn)\n                    } else if (bn > an) {\n                        a.push.apply(a, b.slice(an))\n                    }\n                    var n = Math.min(an, bn)\n                    for (var i = 0; i < n; i++) {\n                        a.set(i, b[i])\n                    }\n                    delete a.$lock\n                    a._fire(\"set\")\n                } else if (valueType === \"object\") {\n                    value = value.$model ? value.$model : value\n                    var observes = this.$events[name] || []\n                    var newObject = avalon.mix(true, {}, value)\n                    for(i in son ){\n                        if(son.hasOwnProperty(i) && ohasOwn.call(newObject,i)){\n                            son[i] = newObject[i]\n                        }\n                    }\n                    son = accessor._vmodel = modelFactory(value)\n                    son.$events[subscribers] = observes\n                    if (observes.length) {\n                        observes.forEach(function (data) {\n                            if (!data.type) {\n                                return //数据未准备好时忽略更新\n                            }\n                            if (data.rollback) {\n                                data.rollback() //还原 ms-with ms-on\n                            }\n                            bindingHandlers[data.type](data, data.vmodels)\n                        })\n                    }\n                }\n                accessor.updateValue(this, son.$model)\n                accessor.notify(this, this._value, oldValue)\n                return this\n            } else {\n                dependencyDetection.collectDependency(this, accessor)\n                return son\n            }\n        }\n        accessorFactory(accessor, name)\n        if (Array.isArray(initValue)) {\n            parentModel[name] = initValue\n        } else {\n            parentModel[name] = parentModel[name] || {}\n        }\n        var son = accessor._vmodel = modelFactory(initValue, 0, parentModel[name])\n        son.$events[subscribers] = list\n        return accessor\n    }\n\n    function globalUpdateValue(vmodel, value) {\n        vmodel.$model[this._name] = this._value = value\n    }\n\n    function globalNotify(vmodel, value, oldValue) {\n        var name = this._name\n        var array = vmodel.$events[name] //刷新值\n        if (array) {\n            fireDependencies(array) //同步视图\n            EventBus.$fire.call(vmodel, name, value, oldValue) //触发$watch回调\n        }\n    }\n\n    function accessorFactory(accessor, name) {\n        accessor._name = name\n        //同时更新_value与model\n        accessor.updateValue = globalUpdateValue\n        accessor.notify = globalNotify\n    }\n\n//比较两个值是否相等\n    var isEqual = Object.is || function (v1, v2) {\n            if (v1 === 0 && v2 === 0) {\n                return 1 / v1 === 1 / v2\n            } else if (v1 !== v1) {\n                return v2 !== v2\n            } else {\n                return v1 === v2\n            }\n        }\n\n    function isObservable(name, value, $skipArray) {\n        if (isFunction(value) || value && value.nodeName && (value.nodeType > 0) ) {\n            return false\n        }\n        if ($skipArray.indexOf(name) !== -1) {\n            return false\n        }\n        var $special = $skipArray.$special\n        if (name && name.charAt(0) === \"$\" && !$special[name]) {\n            return false\n        }\n        return true\n    }\n    function keysVM(obj) {\n        var arr = Object.keys(obj.$model ? obj.$model: obj)\n        for (var i = 0; i < $$skipArray.length; i++) {\n            var index = arr.indexOf($$skipArray[i])\n            if (index !== -1) {\n                arr.splice(index, 1)\n            }\n        }\n        return arr\n    }\n    var descriptorFactory = W3C ? function (obj) {\n        var descriptors = {}\n        for (var i in obj) {\n            descriptors[i] = {\n                get: obj[i],\n                set: obj[i],\n                enumerable: true,\n                configurable: true\n            }\n        }\n        return descriptors\n    } : function (a) {\n        return a\n    }\n\n//===================修复浏览器对Object.defineProperties的支持=================\n    if (!canHideOwn) {\n        if (\"__defineGetter__\" in avalon) {\n            defineProperty = function (obj, prop, desc) {\n                if ('value' in desc) {\n                    obj[prop] = desc.value\n                }\n                if (\"get\" in desc) {\n                    obj.__defineGetter__(prop, desc.get)\n                }\n                if ('set' in desc) {\n                    obj.__defineSetter__(prop, desc.set)\n                }\n                return obj\n            }\n            defineProperties = function (obj, descs) {\n                for (var prop in descs) {\n                    if (descs.hasOwnProperty(prop)) {\n                        defineProperty(obj, prop, descs[prop])\n                    }\n                }\n                return obj\n            }\n        }\n        if (IEVersion) {\n            var VBClassPool = {}\n            window.execScript([// jshint ignore:line\n                \"Function parseVB(code)\",\n                \"\\tExecuteGlobal(code)\",\n                \"End Function\" //转换一段文本为VB代码\n            ].join(\"\\n\"), \"VBScript\")\n            function VBMediator(instance, accessors, name, value) {// jshint ignore:line\n                var accessor = accessors[name]\n                if (arguments.length === 4) {\n                    accessor.call(instance, value)\n                } else {\n                    return accessor.call(instance)\n                }\n            }\n            defineProperties = function (name, accessors, properties) {\n                // jshint ignore:line\n                var buffer = []\n                buffer.push(\n                    \"\\r\\n\\tPrivate [__data__], [__proxy__]\",\n                    \"\\tPublic Default Function [__const__](d\"+expose+\", p\"+expose+\")\",\n                    \"\\t\\tSet [__data__] = d\"+expose+\": set [__proxy__] = p\"+expose,\n                    \"\\t\\tSet [__const__] = Me\", //链式调用\n                    \"\\tEnd Function\")\n                //添加普通属性,因为VBScript对象不能像JS那样随意增删属性，必须在这里预先定义好\n                for (name in properties) {\n                    if (!accessors.hasOwnProperty(name)) {\n                        buffer.push(\"\\tPublic [\" + name + \"]\")\n                    }\n                }\n                $$skipArray.forEach(function (name) {\n                    if (!accessors.hasOwnProperty(name)) {\n                        buffer.push(\"\\tPublic [\" + name + \"]\")\n                    }\n                })\n                buffer.push(\"\\tPublic [\" + 'hasOwnProperty' + \"]\")\n                //添加访问器属性\n                for (name in accessors) {\n                    buffer.push(\n                        //由于不知对方会传入什么,因此set, let都用上\n                        \"\\tPublic Property Let [\" + name + \"](val\" + expose + \")\", //setter\n                        \"\\t\\tCall [__proxy__](Me,[__data__], \\\"\" + name + \"\\\", val\" + expose + \")\",\n                        \"\\tEnd Property\",\n                        \"\\tPublic Property Set [\" + name + \"](val\" + expose + \")\", //setter\n                        \"\\t\\tCall [__proxy__](Me,[__data__], \\\"\" + name + \"\\\", val\" + expose + \")\",\n                        \"\\tEnd Property\",\n                        \"\\tPublic Property Get [\" + name + \"]\", //getter\n                        \"\\tOn Error Resume Next\", //必须优先使用set语句,否则它会误将数组当字符串返回\n                        \"\\t\\tSet[\" + name + \"] = [__proxy__](Me,[__data__],\\\"\" + name + \"\\\")\",\n                        \"\\tIf Err.Number <> 0 Then\",\n                        \"\\t\\t[\" + name + \"] = [__proxy__](Me,[__data__],\\\"\" + name + \"\\\")\",\n                        \"\\tEnd If\",\n                        \"\\tOn Error Goto 0\",\n                        \"\\tEnd Property\")\n\n                }\n\n                buffer.push(\"End Class\")\n                var body = buffer.join(\"\\r\\n\")\n                var className =VBClassPool[body]\n                if (!className) {\n                    className = generateID(\"VBClass\")\n                    window.parseVB(\"Class \" + className + body)\n                    window.parseVB([\n                        \"Function \" + className + \"Factory(a, b)\", //创建实例并传入两个关键的参数\n                        \"\\tDim o\",\n                        \"\\tSet o = (New \" + className + \")(a, b)\",\n                        \"\\tSet \" + className + \"Factory = o\",\n                        \"End Function\"\n                    ].join(\"\\r\\n\"))\n                    VBClassPool[body] = className\n                }\n                var ret = window[className + \"Factory\"](accessors, VBMediator) //得到其产品\n                return ret //得到其产品\n            }\n        }\n    }\n\n    /*********************************************************************\n     *          监控数组（与ms-each, ms-repeat配合使用）                     *\n     **********************************************************************/\n\n    function arrayFactory(model) {\n        var array = []\n        array.$id = generateID()\n        array.$model = model //数据模型\n        array.$events = {}\n        array.$events[subscribers] = []\n        array._ = modelFactory({\n            length: model.length\n        })\n        array._.$watch(\"length\", function (a, b) {\n            array.$fire(\"length\", a, b)\n        })\n        for (var i in EventBus) {\n            array[i] = EventBus[i]\n        }\n        avalon.mix(array, arrayPrototype)\n        return array\n    }\n\n    function mutateArray(method, pos, n, index, method2, pos2, n2) {\n        var oldLen = this.length, loop = 2\n        while (--loop) {\n            switch (method) {\n                case \"add\":\n                    /* jshint ignore:start */\n                    var array = this.$model.slice(pos, pos + n).map(function (el) {\n                        if (rcomplexType.test(avalon.type(el))) {\n                            return el.$id ? el : modelFactory(el, 0, el)\n                        } else {\n                            return el\n                        }\n                    })\n                    /* jshint ignore:end */\n                    _splice.apply(this, [pos, 0].concat(array))\n                    this._fire(\"add\", pos, n)\n                    break\n                case \"del\":\n                    var ret = this._splice(pos, n)\n                    this._fire(\"del\", pos, n)\n                    break\n            }\n            if (method2) {\n                method = method2\n                pos = pos2\n                n = n2\n                loop = 2\n                method2 = 0\n            }\n        }\n        this._fire(\"index\", index)\n        if (this.length !== oldLen) {\n            this._.length = this.length\n        }\n        return ret\n    }\n\n    var _splice = ap.splice\n    var arrayPrototype = {\n        _splice: _splice,\n        _fire: function (method, a, b) {\n            fireDependencies(this.$events[subscribers], method, a, b)\n        },\n        size: function () { //取得数组长度，这个函数可以同步视图，length不能\n            return this._.length\n        },\n        pushArray: function (array) {\n            var m = array.length, n = this.length\n            if (m) {\n                ap.push.apply(this.$model, array)\n                mutateArray.call(this, \"add\", n, m, Math.max(0, n - 1))\n            }\n            return  m + n\n        },\n        push: function () {\n            //http://jsperf.com/closure-with-arguments\n            var array = []\n            var i, n = arguments.length\n            for (i = 0; i < n; i++) {\n                array[i] = arguments[i]\n            }\n            return this.pushArray(array)\n        },\n        unshift: function () {\n            var m = arguments.length, n = this.length\n            if (m) {\n                ap.unshift.apply(this.$model, arguments)\n                mutateArray.call(this, \"add\", 0, m, 0)\n            }\n            return  m + n //IE67的unshift不会返回长度\n        },\n        shift: function () {\n            if (this.length) {\n                var el = this.$model.shift()\n                mutateArray.call(this, \"del\", 0, 1, 0)\n                return el //返回被移除的元素\n            }\n        },\n        pop: function () {\n            var n = this.length\n            if (n) {\n                var el = this.$model.pop()\n                mutateArray.call(this, \"del\", n - 1, 1, Math.max(0, n - 2))\n                return el //返回被移除的元素\n            }\n        },\n        splice: function (start) {\n            var m = arguments.length, args = [], change\n            var removed = _splice.apply(this.$model, arguments)\n            if (removed.length) { //如果用户删掉了元素\n                args.push(\"del\", start, removed.length, 0)\n                change = true\n            }\n            if (m > 2) {  //如果用户添加了元素\n                if (change) {\n                    args.splice(3, 1, 0, \"add\", start, m - 2)\n                } else {\n                    args.push(\"add\", start, m - 2, 0)\n                }\n                change = true\n            }\n            if (change) { //返回被移除的元素\n                return mutateArray.apply(this, args)\n            } else {\n                return []\n            }\n        },\n        contains: function (el) { //判定是否包含\n            return this.indexOf(el) !== -1\n        },\n        remove: function (el) { //移除第一个等于给定值的元素\n            return this.removeAt(this.indexOf(el))\n        },\n        removeAt: function (index) { //移除指定索引上的元素\n            if (index >= 0) {\n                this.$model.splice(index, 1)\n                return mutateArray.call(this, \"del\", index, 1, 0)\n            }\n            return  []\n        },\n        clear: function () {\n            this.$model.length = this.length = this._.length = 0 //清空数组\n            this._fire(\"clear\", 0)\n            return this\n        },\n        removeAll: function (all) { //移除N个元素\n            if (Array.isArray(all)) {\n                for (var i = this.length - 1; i >= 0; i--) {\n                    if (all.indexOf(this[i]) !== -1) {\n                        this.removeAt(i)\n                    }\n                }\n            } else if (typeof all === \"function\") {\n                for ( i = this.length - 1; i >= 0; i--) {\n                    var el = this[i]\n                    if (all(el, i)) {\n                        this.removeAt(i)\n                    }\n                }\n            } else {\n                this.clear()\n            }\n        },\n        ensure: function (el) {\n            if (!this.contains(el)) { //只有不存在才push\n                this.push(el)\n            }\n            return this\n        },\n        set: function (index, val) {\n            if (index < this.length && index > -1) {\n                var valueType = avalon.type(val)\n                if (val && val.$model) {\n                    val = val.$model\n                }\n                var target = this[index]\n                if (valueType === \"object\") {\n                    for (var i in val) {\n                        if (target.hasOwnProperty(i)) {\n                            target[i] = val[i]\n                        }\n                    }\n                } else if (valueType === \"array\") {\n                    target.clear().push.apply(target, val)\n                } else if (target !== val) {\n                    this[index] = val\n                    this.$model[index] = val\n                    this._fire(\"set\", index, val)\n                }\n            }\n            return this\n        }\n    }\n//相当于原来bindingExecutors.repeat 的index分支\n    function resetIndex(array, pos) {\n        var last = array.length - 1\n        for (var el; el = array[pos]; pos++) {\n            el.$index = pos\n            el.$first = pos === 0\n            el.$last = pos === last\n        }\n    }\n\n    function sortByIndex(array, indexes) {\n        var map = {};\n        for (var i = 0, n = indexes.length; i < n; i++) {\n            map[i] = array[i] // preserve\n            var j = indexes[i]\n            if (j in map) {\n                array[i] = map[j]\n                delete map[j]\n            } else {\n                array[i] = array[j]\n            }\n        }\n    }\n\n    \"sort,reverse\".replace(rword, function (method) {\n        arrayPrototype[method] = function () {\n            var newArray = this.$model//这是要排序的新数组\n            var oldArray = newArray.concat() //保持原来状态的旧数组\n            var mask = Math.random()\n            var indexes = []\n            var hasSort\n            ap[method].apply(newArray, arguments) //排序\n            for (var i = 0, n = oldArray.length; i < n; i++) {\n                var neo = newArray[i]\n                var old = oldArray[i]\n                if (isEqual(neo, old)) {\n                    indexes.push(i)\n                } else {\n                    var index = oldArray.indexOf(neo)\n                    indexes.push(index)//得到新数组的每个元素在旧数组对应的位置\n                    oldArray[index] = mask    //屏蔽已经找过的元素\n                    hasSort = true\n                }\n            }\n            if (hasSort) {\n                sortByIndex(this, indexes)\n                // sortByIndex(this.$proxy, indexes)\n                this._fire(\"move\", indexes)\n                this._fire(\"index\", 0)\n            }\n            return this\n        }\n    })\n\n\n    /*********************************************************************\n     *                           依赖调度系统                             *\n     **********************************************************************/\n//检测两个对象间的依赖关系\n    var dependencyDetection = (function () {\n        var outerFrames = []\n        var currentFrame\n        return {\n            begin: function (accessorObject) {\n                //accessorObject为一个拥有callback的对象\n                outerFrames.push(currentFrame)\n                currentFrame = accessorObject\n            },\n            end: function () {\n                currentFrame = outerFrames.pop()\n            },\n            collectDependency: function (vmodel, accessor) {\n                if (currentFrame) {\n                    //被dependencyDetection.begin调用\n                    currentFrame.callback(vmodel, accessor);\n                }\n            }\n        };\n    })()\n//将绑定对象注入到其依赖项的订阅数组中\n    var ronduplex = /^(duplex|on)$/\n    avalon.injectBinding = function (data) {\n        var valueFn = data.evaluator\n        if (valueFn) { //如果是求值函数\n            dependencyDetection.begin({\n                callback: function (vmodel, dependency) {\n                    injectDependency(vmodel.$events[dependency._name], data)\n                }\n            })\n            try {\n                var value = ronduplex.test(data.type) ? data : valueFn.apply(0, data.args)\n                if(value === void 0){\n                    delete data.evaluator\n                }\n                if (data.handler) {\n                    data.handler(value, data.element, data)\n                }\n            } catch (e) {\n                log(\"warning:exception throwed in [avalon.injectBinding] \" , e)\n                delete data.evaluator\n                var node = data.element\n                if (node && node.nodeType === 3) {\n                    var parent = node.parentNode\n                    if (kernel.commentInterpolate) {\n                        parent.replaceChild(DOC.createComment(data.value), node)\n                    } else {\n                        node.data = openTag + (data.oneTime ? \"::\" : \"\") + data.value + closeTag\n                    }\n                }\n            } finally {\n                dependencyDetection.end()\n            }\n        }\n    }\n\n//将依赖项(比它高层的访问器或构建视图刷新函数的绑定对象)注入到订阅者数组\n    function injectDependency(list, data) {\n        if (data.oneTime)\n            return\n        if (list && avalon.Array.ensure(list, data) && data.element) {\n            injectDisposeQueue(data, list)\n            if (new Date() - beginTime > 444 ) {\n                rejectDisposeQueue()\n            }\n        }\n    }\n\n//通知依赖于这个访问器的订阅者更新自身\n    function fireDependencies(list) {\n        if (list && list.length) {\n            if (new Date() - beginTime > 444 && typeof list[0] === \"object\") {\n                rejectDisposeQueue()\n            }\n            var args = aslice.call(arguments, 1)\n            for (var i = list.length, fn; fn = list[--i]; ) {\n                var el = fn.element\n                if (el && el.parentNode) {\n                    try {\n                        var valueFn = fn.evaluator\n                        if (fn.$repeat) {\n                            fn.handler.apply(fn, args) //处理监控数组的方法\n                        }else if(\"$repeat\" in fn || !valueFn ){//如果没有eval,先eval\n                            bindingHandlers[fn.type](fn, fn.vmodels)\n                        } else if (fn.type !== \"on\") { //事件绑定只能由用户触发,不能由程序触发\n                            var value = valueFn.apply(0, fn.args || [])\n                            fn.handler(value, el, fn)\n                        }\n                    } catch (e) {\n                        avalon.log(e)\n                    }\n                }\n            }\n        }\n    }\n    /*********************************************************************\n     *                          定时GC回收机制                             *\n     **********************************************************************/\n    var disposeCount = 0\n    var disposeQueue = avalon.$$subscribers = []\n    var beginTime = new Date()\n    var oldInfo = {}\n//var uuid2Node = {}\n    function getUid(elem, makeID) { //IE9+,标准浏览器\n        if (!elem.uuid && !makeID) {\n            elem.uuid = ++disposeCount\n        }\n        return elem.uuid\n    }\n\n//添加到回收列队中\n    function injectDisposeQueue(data, list) {\n        var elem = data.element\n        if (!data.uuid) {\n            if (elem.nodeType !== 1) {\n                data.uuid = data.type + getUid(elem.parentNode)+ \"-\"+ (++disposeCount)\n            } else {\n                data.uuid = data.name + \"-\" + getUid(elem)\n            }\n        }\n        var lists = data.lists || (data.lists = [])\n        avalon.Array.ensure(lists, list)\n        list.$uuid = list.$uuid || generateID()\n        if (!disposeQueue[data.uuid]) {\n            disposeQueue[data.uuid] = 1\n            disposeQueue.push(data)\n        }\n    }\n\n    function rejectDisposeQueue(data) {\n        if (avalon.optimize)\n            return\n        var i = disposeQueue.length\n        var n = i\n        var allTypes = []\n        var iffishTypes = {}\n        var newInfo = {}\n        //对页面上所有绑定对象进行分门别类, 只检测个数发生变化的类型\n        while (data = disposeQueue[--i]) {\n            var type = data.type\n            if (newInfo[type]) {\n                newInfo[type]++\n            } else {\n                newInfo[type] = 1\n                allTypes.push(type)\n            }\n        }\n        var diff = false\n        allTypes.forEach(function (type) {\n            if (oldInfo[type] !== newInfo[type]) {\n                iffishTypes[type] = 1\n                diff = true\n            }\n        })\n        i = n\n        if (diff) {\n            while (data = disposeQueue[--i]) {\n                if (data.element === null) {\n                    disposeQueue.splice(i, 1)\n                    continue\n                }\n                if (iffishTypes[data.type] && shouldDispose(data.element)) { //如果它没有在DOM树\n                    disposeQueue.splice(i, 1)\n                    delete disposeQueue[data.uuid]\n                    //delete uuid2Node[data.element.uuid]\n                    var lists = data.lists\n                    for (var k = 0, list; list = lists[k++]; ) {\n                        avalon.Array.remove(lists, list)\n                        avalon.Array.remove(list, data)\n                    }\n                    disposeData(data)\n                }\n            }\n        }\n        oldInfo = newInfo\n        beginTime = new Date()\n    }\n\n    function disposeData(data) {\n        delete disposeQueue[data.uuid] // 先清除，不然无法回收了\n        data.element = null\n        data.rollback && data.rollback()\n        for (var key in data) {\n            data[key] = null\n        }\n    }\n\n    function shouldDispose(el) {\n        try {//IE下，如果文本节点脱离DOM树，访问parentNode会报错\n            var fireError = el.parentNode.nodeType\n        } catch (e) {\n            return true\n        }\n        if (el.ifRemove) {\n            // 如果节点被放到ifGroup，才移除\n            if (!root.contains(el.ifRemove) && (ifGroup === el.parentNode)) {\n                el.parentNode && el.parentNode.removeChild(el)\n                return true\n            }\n        }\n        return el.msRetain ? 0 : (el.nodeType === 1 ? !root.contains(el) : !avalon.contains(root, el))\n    }\n\n    /************************************************************************\n     *            HTML处理(parseHTML, innerHTML, clearHTML)                  *\n     ************************************************************************/\n// We have to close these tags to support XHTML\n    var tagHooks = {\n        area: [1, \"<map>\", \"</map>\"],\n        param: [1, \"<object>\", \"</object>\"],\n        col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n        legend: [1, \"<fieldset>\", \"</fieldset>\"],\n        option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n        thead: [1, \"<table>\", \"</table>\"],\n        tr: [2, \"<table>\", \"</table>\"],\n        td: [3, \"<table><tr>\", \"</tr></table>\"],\n        g: [1, '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\">', '</svg>'],\n        //IE6-8在用innerHTML生成节点时，不能直接创建no-scope元素与HTML5的新标签\n        _default: W3C ? [0, \"\", \"\"] : [1, \"X<div>\", \"</div>\"] //div可以不用闭合\n    }\n    tagHooks.th = tagHooks.td\n    tagHooks.optgroup = tagHooks.option\n    tagHooks.tbody = tagHooks.tfoot = tagHooks.colgroup = tagHooks.caption = tagHooks.thead\n    String(\"circle,defs,ellipse,image,line,path,polygon,polyline,rect,symbol,text,use\").replace(rword, function (tag) {\n        tagHooks[tag] = tagHooks.g //处理SVG\n    })\n    var rtagName = /<([\\w:]+)/  //取得其tagName\n    var rxhtml = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/ig\n    var rcreate = W3C ? /[^\\d\\D]/ : /(<(?:script|link|style|meta|noscript))/ig\n    var scriptTypes = oneObject([\"\", \"text/javascript\", \"text/ecmascript\", \"application/ecmascript\", \"application/javascript\"])\n    var rnest = /<(?:tb|td|tf|th|tr|col|opt|leg|cap|area)/ //需要处理套嵌关系的标签\n    var script = DOC.createElement(\"script\")\n    var rhtml = /<|&#?\\w+;/\n    avalon.parseHTML = function (html) {\n        var fragment = avalonFragment.cloneNode(false)\n        if (typeof html !== \"string\") {\n            return fragment\n        }\n        if (!rhtml.test(html)) {\n            fragment.appendChild(DOC.createTextNode(html))\n            return fragment\n        }\n        html = html.replace(rxhtml, \"<$1></$2>\").trim()\n        var tag = (rtagName.exec(html) || [\"\", \"\"])[1].toLowerCase(),\n        //取得其标签名\n            wrap = tagHooks[tag] || tagHooks._default,\n            wrapper = cinerator,\n            firstChild, neo\n        if (!W3C) { //fix IE\n            html = html.replace(rcreate, \"<br class=msNoScope>$1\") //在link style script等标签之前添加一个补丁\n        }\n        wrapper.innerHTML = wrap[1] + html + wrap[2]\n        var els = wrapper.getElementsByTagName(\"script\")\n        if (els.length) { //使用innerHTML生成的script节点不会发出请求与执行text属性\n            for (var i = 0, el; el = els[i++]; ) {\n                if (scriptTypes[el.type]) {\n                    //以偷龙转凤方式恢复执行脚本功能\n                    neo = script.cloneNode(false) //FF不能省略参数\n                    ap.forEach.call(el.attributes, function (attr) {\n                        if (attr && attr.specified) {\n                            neo[attr.name] = attr.value //复制其属性\n                            neo.setAttribute(attr.name, attr.value)\n                        }\n                    })  // jshint ignore:line\n                    neo.text = el.text\n                    el.parentNode.replaceChild(neo, el) //替换节点\n                }\n            }\n        }\n        if (!W3C) { //fix IE\n            var target = wrap[1] === \"X<div>\" ? wrapper.lastChild.firstChild : wrapper.lastChild\n            if (target && target.tagName === \"TABLE\" && tag !== \"tbody\") {\n                //IE6-7处理 <thead> --> <thead>,<tbody>\n                //<tfoot> --> <tfoot>,<tbody>\n                //<table> --> <table><tbody></table>\n                for (els = target.childNodes, i = 0; el = els[i++]; ) {\n                    if (el.tagName === \"TBODY\" && !el.innerHTML) {\n                        target.removeChild(el)\n                        break\n                    }\n                }\n            }\n            els = wrapper.getElementsByTagName(\"br\")\n            var n = els.length\n            while (el = els[--n]) {\n                if (el.className === \"msNoScope\") {\n                    el.parentNode.removeChild(el)\n                }\n            }\n            for (els = wrapper.all, i = 0; el = els[i++]; ) { //fix VML\n                if (isVML(el)) {\n                    fixVML(el)\n                }\n            }\n        }\n        //移除我们为了符合套嵌关系而添加的标签\n        for (i = wrap[0]; i--; wrapper = wrapper.lastChild) {\n        }\n        while (firstChild = wrapper.firstChild) { // 将wrapper上的节点转移到文档碎片上！\n            fragment.appendChild(firstChild)\n        }\n        return fragment\n    }\n\n    function isVML(src) {\n        var nodeName = src.nodeName\n        return nodeName.toLowerCase() === nodeName && src.scopeName && src.outerText === \"\"\n    }\n\n    function fixVML(node) {\n        if (node.currentStyle.behavior !== \"url(#default#VML)\") {\n            node.style.behavior = \"url(#default#VML)\"\n            node.style.display = \"inline-block\"\n            node.style.zoom = 1 //hasLayout\n        }\n    }\n    avalon.innerHTML = function (node, html) {\n        if (!W3C && (!rcreate.test(html) && !rnest.test(html))) {\n            try {\n                node.innerHTML = html\n                return\n            } catch (e) {\n            }\n        }\n        var a = this.parseHTML(html)\n        this.clearHTML(node).appendChild(a)\n    }\n    avalon.clearHTML = function (node) {\n        node.textContent = \"\"\n        while (node.firstChild) {\n            node.removeChild(node.firstChild)\n        }\n        return node\n    }\n\n    /*********************************************************************\n     *                  avalon的原型方法定义区                            *\n     **********************************************************************/\n\n    function hyphen(target) {\n        //转换为连字符线风格\n        return target.replace(/([a-z\\d])([A-Z]+)/g, \"$1-$2\").toLowerCase()\n    }\n\n    function camelize(target) {\n        //提前判断，提高getStyle等的效率\n        if (!target || target.indexOf(\"-\") < 0 && target.indexOf(\"_\") < 0) {\n            return target\n        }\n        //转换为驼峰风格\n        return target.replace(/[-_][^-_]/g, function (match) {\n            return match.charAt(1).toUpperCase()\n        })\n    }\n\n    var fakeClassListMethods = {\n        _toString: function () {\n            var node = this.node\n            var cls = node.className\n            var str = typeof cls === \"string\" ? cls : cls.baseVal\n            return str.split(/\\s+/).join(\" \")\n        },\n        _contains: function (cls) {\n            return (\" \" + this + \" \").indexOf(\" \" + cls + \" \") > -1\n        },\n        _add: function (cls) {\n            if (!this.contains(cls)) {\n                this._set(this + \" \" + cls)\n            }\n        },\n        _remove: function (cls) {\n            this._set((\" \" + this + \" \").replace(\" \" + cls + \" \", \" \"))\n        },\n        __set: function (cls) {\n            cls = cls.trim()\n            var node = this.node\n            if (rsvg.test(node)) {\n                //SVG元素的className是一个对象 SVGAnimatedString { baseVal=\"\", animVal=\"\"}，只能通过set/getAttribute操作\n                node.setAttribute(\"class\", cls)\n            } else {\n                node.className = cls\n            }\n        } //toggle存在版本差异，因此不使用它\n    }\n\n    function fakeClassList(node) {\n        if (!(\"classList\" in node)) {\n            node.classList = {\n                node: node\n            }\n            for (var k in fakeClassListMethods) {\n                node.classList[k.slice(1)] = fakeClassListMethods[k]\n            }\n        }\n        return node.classList\n    }\n\n\n    \"add,remove\".replace(rword, function (method) {\n        avalon.fn[method + \"Class\"] = function (cls) {\n            var el = this[0]\n            //https://developer.mozilla.org/zh-CN/docs/Mozilla/Firefox/Releases/26\n            if (cls && typeof cls === \"string\" && el && el.nodeType === 1) {\n                cls.replace(/\\S+/g, function (c) {\n                    fakeClassList(el)[method](c)\n                })\n            }\n            return this\n        }\n    })\n    avalon.fn.mix({\n        hasClass: function (cls) {\n            var el = this[0] || {}\n            return el.nodeType === 1 && fakeClassList(el).contains(cls)\n        },\n        toggleClass: function (value, stateVal) {\n            var className, i = 0\n            var classNames = String(value).split(/\\s+/)\n            var isBool = typeof stateVal === \"boolean\"\n            while ((className = classNames[i++])) {\n                var state = isBool ? stateVal : !this.hasClass(className)\n                this[state ? \"addClass\" : \"removeClass\"](className)\n            }\n            return this\n        },\n        attr: function (name, value) {\n            if (arguments.length === 2) {\n                this[0].setAttribute(name, value)\n                return this\n            } else {\n                return this[0].getAttribute(name)\n            }\n        },\n        data: function (name, value) {\n            name = \"data-\" + hyphen(name || \"\")\n            switch (arguments.length) {\n                case 2:\n                    this.attr(name, value)\n                    return this\n                case 1:\n                    var val = this.attr(name)\n                    return parseData(val)\n                case 0:\n                    var ret = {}\n                    ap.forEach.call(this[0].attributes, function (attr) {\n                        if (attr) {\n                            name = attr.name\n                            if (!name.indexOf(\"data-\")) {\n                                name = camelize(name.slice(5))\n                                ret[name] = parseData(attr.value)\n                            }\n                        }\n                    })\n                    return ret\n            }\n        },\n        removeData: function (name) {\n            name = \"data-\" + hyphen(name)\n            this[0].removeAttribute(name)\n            return this\n        },\n        css: function (name, value) {\n            if (avalon.isPlainObject(name)) {\n                for (var i in name) {\n                    avalon.css(this, i, name[i])\n                }\n            } else {\n                var ret = avalon.css(this, name, value)\n            }\n            return ret !== void 0 ? ret : this\n        },\n        position: function () {\n            var offsetParent, offset,\n                elem = this[0],\n                parentOffset = {\n                    top: 0,\n                    left: 0\n                }\n            if (!elem) {\n                return\n            }\n            if (this.css(\"position\") === \"fixed\") {\n                offset = elem.getBoundingClientRect()\n            } else {\n                offsetParent = this.offsetParent() //得到真正的offsetParent\n                offset = this.offset() // 得到正确的offsetParent\n                if (offsetParent[0].tagName !== \"HTML\") {\n                    parentOffset = offsetParent.offset()\n                }\n                parentOffset.top += avalon.css(offsetParent[0], \"borderTopWidth\", true)\n                parentOffset.left += avalon.css(offsetParent[0], \"borderLeftWidth\", true)\n\n                // Subtract offsetParent scroll positions\n                parentOffset.top -= offsetParent.scrollTop()\n                parentOffset.left -= offsetParent.scrollLeft()\n            }\n            return {\n                top: offset.top - parentOffset.top - avalon.css(elem, \"marginTop\", true),\n                left: offset.left - parentOffset.left - avalon.css(elem, \"marginLeft\", true)\n            }\n        },\n        offsetParent: function () {\n            var offsetParent = this[0].offsetParent\n            while (offsetParent && avalon.css(offsetParent, \"position\") === \"static\") {\n                offsetParent = offsetParent.offsetParent;\n            }\n            return avalon(offsetParent || root)\n        },\n        bind: function (type, fn, phase) {\n            if (this[0]) { //此方法不会链\n                return avalon.bind(this[0], type, fn, phase)\n            }\n        },\n        unbind: function (type, fn, phase) {\n            if (this[0]) {\n                avalon.unbind(this[0], type, fn, phase)\n            }\n            return this\n        },\n        val: function (value) {\n            var node = this[0]\n            if (node && node.nodeType === 1) {\n                var get = arguments.length === 0\n                var access = get ? \":get\" : \":set\"\n                var fn = valHooks[getValType(node) + access]\n                if (fn) {\n                    var val = fn(node, value)\n                } else if (get) {\n                    return (node.value || \"\").replace(/\\r/g, \"\")\n                } else {\n                    node.value = value\n                }\n            }\n            return get ? val : this\n        }\n    })\n\n    function parseData(data) {\n        try {\n            if (typeof data === \"object\")\n                return data\n            data = data === \"true\" ? true :\n                data === \"false\" ? false :\n                    data === \"null\" ? null : +data + \"\" === data ? +data : rbrace.test(data) ? avalon.parseJSON(data) : data\n        } catch (e) {\n        }\n        return data\n    }\n    var rbrace = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,\n        rvalidchars = /^[\\],:{}\\s]*$/,\n        rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g,\n        rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,\n        rvalidtokens = /\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g\n    avalon.parseJSON = window.JSON ? JSON.parse : function (data) {\n        if (typeof data === \"string\") {\n            data = data.trim();\n            if (data) {\n                if (rvalidchars.test(data.replace(rvalidescape, \"@\")\n                        .replace(rvalidtokens, \"]\")\n                        .replace(rvalidbraces, \"\"))) {\n                    return (new Function(\"return \" + data))() // jshint ignore:line\n                }\n            }\n            avalon.error(\"Invalid JSON: \" + data)\n        }\n        return data\n    }\n    avalon.fireDom = function (elem, type, opts) {\n        if (DOC.createEvent) {\n            var hackEvent = DOC.createEvent(\"Events\");\n            hackEvent.initEvent(type, true, true)\n            avalon.mix(hackEvent, opts)\n            elem.dispatchEvent(hackEvent)\n        } else {\n            try {\n                hackEvent = DOC.createEventObject()\n                avalon.mix(hackEvent, opts)\n                elem.fireEvent(\"on\" + type, hackEvent)\n            } catch (e) {//IE6-8触发事件必须保证在DOM树中,否则报\"SCRIPT16389: 未指明的错误\"\n            }\n        }\n    }\n\n//生成avalon.fn.scrollLeft, avalon.fn.scrollTop方法\n    avalon.each({\n        scrollLeft: \"pageXOffset\",\n        scrollTop: \"pageYOffset\"\n    }, function (method, prop) {\n        avalon.fn[method] = function (val) {\n            var node = this[0] || {}, win = getWindow(node),\n                top = method === \"scrollTop\"\n            if (!arguments.length) {\n                return win ? (prop in win) ? win[prop] : root[method] : node[method]\n            } else {\n                if (win) {\n                    win.scrollTo(!top ? val : avalon(win).scrollLeft(), top ? val : avalon(win).scrollTop())\n                } else {\n                    node[method] = val\n                }\n            }\n        }\n    })\n\n    function getWindow(node) {\n        return node.window && node.document ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;\n    }\n//=============================css相关=======================\n    var cssHooks = avalon.cssHooks = {}\n    var prefixes = [\"\", \"-webkit-\", \"-o-\", \"-moz-\", \"-ms-\"]\n    var cssMap = {\n        \"float\": W3C ? \"cssFloat\" : \"styleFloat\"\n    }\n    avalon.cssNumber = oneObject(\"animationIterationCount,columnCount,order,flex,flexGrow,flexShrink,fillOpacity,fontWeight,lineHeight,opacity,orphans,widows,zIndex,zoom\")\n\n    avalon.cssName = function (name, host, camelCase) {\n        if (cssMap[name]) {\n            return cssMap[name]\n        }\n        host = host || root.style\n        for (var i = 0, n = prefixes.length; i < n; i++) {\n            camelCase = camelize(prefixes[i] + name)\n            if (camelCase in host) {\n                return (cssMap[name] = camelCase)\n            }\n        }\n        return null\n    }\n    cssHooks[\"@:set\"] = function (node, name, value) {\n        try { //node.style.width = NaN;node.style.width = \"xxxxxxx\";node.style.width = undefine 在旧式IE下会抛异常\n            node.style[name] = value\n        } catch (e) {\n        }\n    }\n    if (window.getComputedStyle) {\n        cssHooks[\"@:get\"] = function (node, name) {\n            if (!node || !node.style) {\n                throw new Error(\"getComputedStyle要求传入一个节点 \" + node)\n            }\n            var ret, styles = getComputedStyle(node, null)\n            if (styles) {\n                ret = name === \"filter\" ? styles.getPropertyValue(name) : styles[name]\n                if (ret === \"\") {\n                    ret = node.style[name] //其他浏览器需要我们手动取内联样式\n                }\n            }\n            return ret\n        }\n        cssHooks[\"opacity:get\"] = function (node) {\n            var ret = cssHooks[\"@:get\"](node, \"opacity\")\n            return ret === \"\" ? \"1\" : ret\n        }\n    } else {\n        var rnumnonpx = /^-?(?:\\d*\\.)?\\d+(?!px)[^\\d\\s]+$/i\n        var rposition = /^(top|right|bottom|left)$/\n        var ralpha = /alpha\\([^)]*\\)/i\n        var ie8 = !!window.XDomainRequest\n        var salpha = \"DXImageTransform.Microsoft.Alpha\"\n        var border = {\n            thin: ie8 ? '1px' : '2px',\n            medium: ie8 ? '3px' : '4px',\n            thick: ie8 ? '5px' : '6px'\n        }\n        cssHooks[\"@:get\"] = function (node, name) {\n            //取得精确值，不过它有可能是带em,pc,mm,pt,%等单位\n            var currentStyle = node.currentStyle\n            var ret = currentStyle[name]\n            if ((rnumnonpx.test(ret) && !rposition.test(ret))) {\n                //①，保存原有的style.left, runtimeStyle.left,\n                var style = node.style,\n                    left = style.left,\n                    rsLeft = node.runtimeStyle.left\n                //②由于③处的style.left = xxx会影响到currentStyle.left，\n                //因此把它currentStyle.left放到runtimeStyle.left，\n                //runtimeStyle.left拥有最高优先级，不会style.left影响\n                node.runtimeStyle.left = currentStyle.left\n                //③将精确值赋给到style.left，然后通过IE的另一个私有属性 style.pixelLeft\n                //得到单位为px的结果；fontSize的分支见http://bugs.jquery.com/ticket/760\n                style.left = name === 'fontSize' ? '1em' : (ret || 0)\n                ret = style.pixelLeft + \"px\"\n                //④还原 style.left，runtimeStyle.left\n                style.left = left\n                node.runtimeStyle.left = rsLeft\n            }\n            if (ret === \"medium\") {\n                name = name.replace(\"Width\", \"Style\")\n                //border width 默认值为medium，即使其为0\"\n                if (currentStyle[name] === \"none\") {\n                    ret = \"0px\"\n                }\n            }\n            return ret === \"\" ? \"auto\" : border[ret] || ret\n        }\n        cssHooks[\"opacity:set\"] = function (node, name, value) {\n            var style = node.style\n            var opacity = isFinite(value) && value <= 1 ? \"alpha(opacity=\" + value * 100 + \")\" : \"\"\n            var filter = style.filter || \"\";\n            style.zoom = 1\n            //不能使用以下方式设置透明度\n            //node.filters.alpha.opacity = value * 100\n            style.filter = (ralpha.test(filter) ?\n                filter.replace(ralpha, opacity) :\n            filter + \" \" + opacity).trim()\n            if (!style.filter) {\n                style.removeAttribute(\"filter\")\n            }\n        }\n        cssHooks[\"opacity:get\"] = function (node) {\n            //这是最快的获取IE透明值的方式，不需要动用正则了！\n            var alpha = node.filters.alpha || node.filters[salpha],\n                op = alpha && alpha.enabled ? alpha.opacity : 100\n            return (op / 100) + \"\" //确保返回的是字符串\n        }\n    }\n\n    \"top,left\".replace(rword, function (name) {\n        cssHooks[name + \":get\"] = function (node) {\n            var computed = cssHooks[\"@:get\"](node, name)\n            return /px$/.test(computed) ? computed :\n            avalon(node).position()[name] + \"px\"\n        }\n    })\n\n    var cssShow = {\n        position: \"absolute\",\n        visibility: \"hidden\",\n        display: \"block\"\n    }\n\n    var rdisplayswap = /^(none|table(?!-c[ea]).+)/\n\n    function showHidden(node, array) {\n        //http://www.cnblogs.com/rubylouvre/archive/2012/10/27/2742529.html\n        if (node.offsetWidth <= 0) { //opera.offsetWidth可能小于0\n            if (rdisplayswap.test(cssHooks[\"@:get\"](node, \"display\"))) {\n                var obj = {\n                    node: node\n                }\n                for (var name in cssShow) {\n                    obj[name] = node.style[name]\n                    node.style[name] = cssShow[name]\n                }\n                array.push(obj)\n            }\n            var parent = node.parentNode\n            if (parent && parent.nodeType === 1) {\n                showHidden(parent, array)\n            }\n        }\n    }\n    \"Width,Height\".replace(rword, function (name) { //fix 481\n        var method = name.toLowerCase(),\n            clientProp = \"client\" + name,\n            scrollProp = \"scroll\" + name,\n            offsetProp = \"offset\" + name\n        cssHooks[method + \":get\"] = function (node, which, override) {\n            var boxSizing = -4\n            if (typeof override === \"number\") {\n                boxSizing = override\n            }\n            which = name === \"Width\" ? [\"Left\", \"Right\"] : [\"Top\", \"Bottom\"]\n            var ret = node[offsetProp] // border-box 0\n            if (boxSizing === 2) { // margin-box 2\n                return ret + avalon.css(node, \"margin\" + which[0], true) + avalon.css(node, \"margin\" + which[1], true)\n            }\n            if (boxSizing < 0) { // padding-box  -2\n                ret = ret - avalon.css(node, \"border\" + which[0] + \"Width\", true) - avalon.css(node, \"border\" + which[1] + \"Width\", true)\n            }\n            if (boxSizing === -4) { // content-box -4\n                ret = ret - avalon.css(node, \"padding\" + which[0], true) - avalon.css(node, \"padding\" + which[1], true)\n            }\n            return ret\n        }\n        cssHooks[method + \"&get\"] = function (node) {\n            var hidden = [];\n            showHidden(node, hidden);\n            var val = cssHooks[method + \":get\"](node)\n            for (var i = 0, obj; obj = hidden[i++]; ) {\n                node = obj.node\n                for (var n in obj) {\n                    if (typeof obj[n] === \"string\") {\n                        node.style[n] = obj[n]\n                    }\n                }\n            }\n            return val;\n        }\n        avalon.fn[method] = function (value) { //会忽视其display\n            var node = this[0]\n            if (arguments.length === 0) {\n                if (node.setTimeout) { //取得窗口尺寸,IE9后可以用node.innerWidth /innerHeight代替\n                    return node[\"inner\" + name] || node.document.documentElement[clientProp] ||\n                        node.document.body[clientProp]//IE6下前两个分别为undefine,0\n                }\n                if (node.nodeType === 9) { //取得页面尺寸\n                    var doc = node.documentElement\n                    //FF chrome    html.scrollHeight< body.scrollHeight\n                    //IE 标准模式 : html.scrollHeight> body.scrollHeight\n                    //IE 怪异模式 : html.scrollHeight 最大等于可视窗口多一点？\n                    return Math.max(node.body[scrollProp], doc[scrollProp], node.body[offsetProp], doc[offsetProp], doc[clientProp])\n                }\n                return cssHooks[method + \"&get\"](node)\n            } else {\n                return this.css(method, value)\n            }\n        }\n        avalon.fn[\"inner\" + name] = function () {\n            return cssHooks[method + \":get\"](this[0], void 0, -2)\n        }\n        avalon.fn[\"outer\" + name] = function (includeMargin) {\n            return cssHooks[method + \":get\"](this[0], void 0, includeMargin === true ? 2 : 0)\n        }\n    })\n    avalon.fn.offset = function () { //取得距离页面左右角的坐标\n        var node = this[0],\n            box = {\n                left: 0,\n                top: 0\n            }\n        if (!node || !node.tagName || !node.ownerDocument) {\n            return box\n        }\n        var doc = node.ownerDocument,\n            body = doc.body,\n            root = doc.documentElement,\n            win = doc.defaultView || doc.parentWindow\n        if (!avalon.contains(root, node)) {\n            return box\n        }\n        //http://hkom.blog1.fc2.com/?mode=m&no=750 body的偏移量是不包含margin的\n        //我们可以通过getBoundingClientRect来获得元素相对于client的rect.\n        //http://msdn.microsoft.com/en-us/library/ms536433.aspx\n        if (node.getBoundingClientRect) {\n            box = node.getBoundingClientRect() // BlackBerry 5, iOS 3 (original iPhone)\n        }\n        //chrome/IE6: body.scrollTop, firefox/other: root.scrollTop\n        var clientTop = root.clientTop || body.clientTop,\n            clientLeft = root.clientLeft || body.clientLeft,\n            scrollTop = Math.max(win.pageYOffset || 0, root.scrollTop, body.scrollTop),\n            scrollLeft = Math.max(win.pageXOffset || 0, root.scrollLeft, body.scrollLeft)\n        // 把滚动距离加到left,top中去。\n        // IE一些版本中会自动为HTML元素加上2px的border，我们需要去掉它\n        // http://msdn.microsoft.com/en-us/library/ms533564(VS.85).aspx\n        return {\n            top: box.top + scrollTop - clientTop,\n            left: box.left + scrollLeft - clientLeft\n        }\n    }\n\n//==================================val相关============================\n\n    function getValType(elem) {\n        var ret = elem.tagName.toLowerCase()\n        return ret === \"input\" && /checkbox|radio/.test(elem.type) ? \"checked\" : ret\n    }\n    var roption = /^<option(?:\\s+\\w+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s+value[\\s=]/i\n    var valHooks = {\n        \"option:get\": IEVersion ? function (node) {\n            //在IE11及W3C，如果没有指定value，那么node.value默认为node.text（存在trim作），但IE9-10则是取innerHTML(没trim操作)\n            //specified并不可靠，因此通过分析outerHTML判定用户有没有显示定义value\n            return roption.test(node.outerHTML) ? node.value : node.text.trim()\n        } : function (node) {\n            return node.value\n        },\n        \"select:get\": function (node, value) {\n            var option, options = node.options,\n                index = node.selectedIndex,\n                getter = valHooks[\"option:get\"],\n                one = node.type === \"select-one\" || index < 0,\n                values = one ? null : [],\n                max = one ? index + 1 : options.length,\n                i = index < 0 ? max : one ? index : 0\n            for (; i < max; i++) {\n                option = options[i]\n                //旧式IE在reset后不会改变selected，需要改用i === index判定\n                //我们过滤所有disabled的option元素，但在safari5下，如果设置select为disable，那么其所有孩子都disable\n                //因此当一个元素为disable，需要检测其是否显式设置了disable及其父节点的disable情况\n                if ((option.selected || i === index) && !option.disabled) {\n                    value = getter(option)\n                    if (one) {\n                        return value\n                    }\n                    //收集所有selected值组成数组返回\n                    values.push(value)\n                }\n            }\n            return values\n        },\n        \"select:set\": function (node, values, optionSet) {\n            values = [].concat(values) //强制转换为数组\n            var getter = valHooks[\"option:get\"]\n            for (var i = 0, el; el = node.options[i++]; ) {\n                if ((el.selected = values.indexOf(getter(el)) > -1)) {\n                    optionSet = true\n                }\n            }\n            if (!optionSet) {\n                node.selectedIndex = -1\n            }\n        }\n    }\n\n    /*********************************************************************\n     *                          编译系统                                  *\n     **********************************************************************/\n    var meta = {\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"': '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    }\n    var quote = window.JSON && JSON.stringify || function(str) {\n            return '\"' + str.replace(/[\\\\\\\"\\x00-\\x1f]/g, function(a) {\n                    var c = meta[a];\n                    return typeof c === 'string' ? c :\n                    '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n                }) + '\"'\n        }\n\n    var keywords = [\n        \"break,case,catch,continue,debugger,default,delete,do,else,false\",\n        \"finally,for,function,if,in,instanceof,new,null,return,switch,this\",\n        \"throw,true,try,typeof,var,void,while,with\", /* 关键字*/\n        \"abstract,boolean,byte,char,class,const,double,enum,export,extends\",\n        \"final,float,goto,implements,import,int,interface,long,native\",\n        \"package,private,protected,public,short,static,super,synchronized\",\n        \"throws,transient,volatile\", /*保留字*/\n        \"arguments,let,yield,undefined\" /* ECMA 5 - use strict*/].join(\",\")\n    var rrexpstr = /\\/\\*[\\w\\W]*?\\*\\/|\\/\\/[^\\n]*\\n|\\/\\/[^\\n]*$|\"(?:[^\"\\\\]|\\\\[\\w\\W])*\"|'(?:[^'\\\\]|\\\\[\\w\\W])*'|[\\s\\t\\n]*\\.[\\s\\t\\n]*[$\\w\\.]+/g\n    var rsplit = /[^\\w$]+/g\n    var rkeywords = new RegExp([\"\\\\b\" + keywords.replace(/,/g, '\\\\b|\\\\b') + \"\\\\b\"].join('|'), 'g')\n    var rnumber = /\\b\\d[^,]*/g\n    var rcomma = /^,+|,+$/g\n    var variablePool = new Cache(512)\n    var getVariables = function (code) {\n        var key = \",\" + code.trim()\n        var ret = variablePool.get(key)\n        if (ret) {\n            return ret\n        }\n        var match = code\n            .replace(rrexpstr, \"\")\n            .replace(rsplit, \",\")\n            .replace(rkeywords, \"\")\n            .replace(rnumber, \"\")\n            .replace(rcomma, \"\")\n            .split(/^$|,+/)\n        return variablePool.put(key, uniqSet(match))\n    }\n    /*添加赋值语句*/\n\n    function addAssign(vars, scope, name, data) {\n        var ret = [],\n            prefix = \" = \" + name + \".\"\n        for (var i = vars.length, prop; prop = vars[--i]; ) {\n            if (scope.hasOwnProperty(prop)) {\n                ret.push(prop + prefix + prop)\n                data.vars.push(prop)\n                if (data.type === \"duplex\") {\n                    vars.get = name + \".\" + prop\n                }\n                vars.splice(i, 1)\n            }\n        }\n        return ret\n    }\n\n    function uniqSet(array) {\n        var ret = [],\n            unique = {}\n        for (var i = 0; i < array.length; i++) {\n            var el = array[i]\n            var id = el && typeof el.$id === \"string\" ? el.$id : el\n            if (!unique[id]) {\n                unique[id] = ret.push(el)\n            }\n        }\n        return ret\n    }\n//缓存求值函数，以便多次利用\n    var evaluatorPool = new Cache(128)\n//取得求值函数及其传参\n    var rduplex = /\\w\\[.*\\]|\\w\\.\\w/\n    var rproxy = /(\\$proxy\\$[a-z]+)\\d+$/\n    var rthimRightParentheses = /\\)\\s*$/\n    var rthimOtherParentheses = /\\)\\s*\\|/g\n    var rquoteFilterName = /\\|\\s*([$\\w]+)/g\n    var rpatchBracket = /\"\\s*\\[\"/g\n    var rthimLeftParentheses = /\"\\s*\\(/g\n    function parseFilter(val, filters) {\n        filters = filters\n            .replace(rthimRightParentheses, \"\")//处理最后的小括号\n            .replace(rthimOtherParentheses, function () {//处理其他小括号\n                return \"],|\"\n            })\n            .replace(rquoteFilterName, function (a, b) { //处理|及它后面的过滤器的名字\n                return \"[\" + quote(b)\n            })\n            .replace(rpatchBracket, function () {\n                return '\"],[\"'\n            })\n            .replace(rthimLeftParentheses, function () {\n                return '\",'\n            }) + \"]\"\n        return  \"return this.filters.$filter(\" + val + \", \" + filters + \")\"\n    }\n\n    function parseExpr(code, scopes, data) {\n        var dataType = data.type\n        var filters = data.filters || \"\"\n        var exprId = scopes.map(function (el) {\n                return String(el.$id).replace(rproxy, \"$1\")\n            }) + code + dataType + filters\n        var vars = getVariables(code).concat(),\n            assigns = [],\n            names = [],\n            args = [],\n            prefix = \"\"\n        //args 是一个对象数组， names 是将要生成的求值函数的参数\n        scopes = uniqSet(scopes)\n        data.vars = []\n        for (var i = 0, sn = scopes.length; i < sn; i++) {\n            if (vars.length) {\n                var name = \"vm\" + expose + \"_\" + i\n                names.push(name)\n                args.push(scopes[i])\n                assigns.push.apply(assigns, addAssign(vars, scopes[i], name, data))\n            }\n        }\n        if (!assigns.length && dataType === \"duplex\") {\n            return\n        }\n        if (dataType !== \"duplex\" && (code.indexOf(\"||\") > -1 || code.indexOf(\"&&\") > -1)) {\n            //https://github.com/RubyLouvre/avalon/issues/583\n            data.vars.forEach(function (v) {\n                var reg = new RegExp(\"\\\\b\" + v + \"(?:\\\\.\\\\w+|\\\\[\\\\w+\\\\])+\", \"ig\")\n                code = code.replace(reg, function (_, cap) {\n                    var c = _.charAt(v.length)\n                    //var r = IEVersion ? code.slice(arguments[1] + _.length) : RegExp.rightContext\n                    //https://github.com/RubyLouvre/avalon/issues/966\n                    var r = code.slice(cap + _.length)\n                    var method = /^\\s*\\(/.test(r)\n                    if (c === \".\" || c === \"[\" || method) {//比如v为aa,我们只匹配aa.bb,aa[cc],不匹配aaa.xxx\n                        var name = \"var\" + String(Math.random()).replace(/^0\\./, \"\")\n                        if (method) {//array.size()\n                            var array = _.split(\".\")\n                            if (array.length > 2) {\n                                var last = array.pop()\n                                assigns.push(name + \" = \" + array.join(\".\"))\n                                return name + \".\" + last\n                            } else {\n                                return _\n                            }\n                        }\n                        assigns.push(name + \" = \" + _)\n                        return name\n                    } else {\n                        return _\n                    }\n                })\n            })\n        }\n        //---------------args----------------\n        data.args = args\n        //---------------cache----------------\n        delete data.vars\n        var fn = evaluatorPool.get(exprId) //直接从缓存，免得重复生成\n        if (fn) {\n            data.evaluator = fn\n            return\n        }\n        prefix = assigns.join(\", \")\n        if (prefix) {\n            prefix = \"var \" + prefix\n        }\n        if (/\\S/.test(filters)) { //文本绑定，双工绑定才有过滤器\n            if (!/text|html/.test(data.type)) {\n                throw Error(\"ms-\" + data.type + \"不支持过滤器\")\n            }\n            code = \"\\nvar ret\" + expose + \" = \" + code + \";\\r\\n\"\n            code += parseFilter(\"ret\" + expose, filters)\n            try {\n                fn = Function.apply(noop, names.concat(\"'use strict';\\n\" + prefix + code))\n                data.evaluator = evaluatorPool.put(exprId, function() {\n                    return fn.apply(avalon, arguments)//确保可以在编译代码中使用this获取avalon对象\n                })\n            } catch (e) {\n                log(\"debug: parse error,\" + e.message)\n            }\n            vars = assigns = names = null //释放内存\n            return\n        } else if (dataType === \"duplex\") { //双工绑定\n            var _body = \"'use strict';\\nreturn function(vvv){\\n\\t\" +\n                prefix +\n                \";\\n\\tif(!arguments.length){\\n\\t\\treturn \" +\n                code +\n                \"\\n\\t}\\n\\t\" + (!rduplex.test(code) ? vars.get : code) +\n                \"= vvv;\\n} \"\n            try {\n                fn = Function.apply(noop, names.concat(_body))\n                data.evaluator = evaluatorPool.put(exprId, fn)\n            } catch (e) {\n                log(\"debug: parse error,\" + e.message)\n            }\n            vars = assigns = names = null //释放内存\n            return\n        } else if (dataType === \"on\") { //事件绑定\n            if (code.indexOf(\"(\") === -1) {\n                code += \".call(this, $event)\"\n            } else {\n                code = code.replace(\"(\", \".call(this,\")\n            }\n            names.push(\"$event\")\n            code = \"\\nreturn \" + code + \";\" //IE全家 Function(\"return \")出错，需要Function(\"return ;\")\n            var lastIndex = code.lastIndexOf(\"\\nreturn\")\n            var header = code.slice(0, lastIndex)\n            var footer = code.slice(lastIndex)\n            code = header + \"\\n\" + footer\n        } else { //其他绑定\n            code = \"\\nreturn \" + code + \";\" //IE全家 Function(\"return \")出错，需要Function(\"return ;\")\n        }\n        try {\n            fn = Function.apply(noop, names.concat(\"'use strict';\\n\" + prefix + code))\n            data.evaluator = evaluatorPool.put(exprId, fn)\n        } catch (e) {\n            log(\"debug: parse error,\" + e.message)\n        }\n        vars = assigns = names = null //释放内存\n    }\n    function stringifyExpr(code) {\n        var hasExpr = rexpr.test(code) //比如ms-class=\"width{{w}}\"的情况\n        if (hasExpr) {\n            var array = scanExpr(code)\n            if (array.length === 1) {\n                return array[0].value\n            }\n            return array.map(function (el) {\n                return el.expr ? \"(\" + el.value + \")\" : quote(el.value)\n            }).join(\" + \")\n        } else {\n            return code\n        }\n    }\n//parseExpr的智能引用代理\n\n    function parseExprProxy(code, scopes, data, noRegister) {\n        code = code || \"\" //code 可能未定义\n        parseExpr(code, scopes, data)\n        if (data.evaluator && !noRegister) {\n            data.handler = bindingExecutors[data.handlerName || data.type]\n            //方便调试\n            //这里非常重要,我们通过判定视图刷新函数的element是否在DOM树决定\n            //将它移出订阅者列表\n            avalon.injectBinding(data)\n        }\n    }\n    avalon.parseExprProxy = parseExprProxy\n    /*********************************************************************\n     *                           扫描系统                                 *\n     **********************************************************************/\n\n    avalon.scan = function(elem, vmodel) {\n        elem = elem || root\n        var vmodels = vmodel ? [].concat(vmodel) : []\n        scanTag(elem, vmodels)\n    }\n\n//http://www.w3.org/TR/html5/syntax.html#void-elements\n    var stopScan = oneObject(\"area,base,basefont,br,col,command,embed,hr,img,input,link,meta,param,source,track,wbr,noscript,script,style,textarea\".toUpperCase())\n\n    function checkScan(elem, callback, innerHTML) {\n        var id = setTimeout(function() {\n            var currHTML = elem.innerHTML\n            clearTimeout(id)\n            if (currHTML === innerHTML) {\n                callback()\n            } else {\n                checkScan(elem, callback, currHTML)\n            }\n        })\n    }\n\n\n    function createSignalTower(elem, vmodel) {\n        var id = elem.getAttribute(\"avalonctrl\") || vmodel.$id\n        elem.setAttribute(\"avalonctrl\", id)\n        vmodel.$events.expr = elem.tagName + '[avalonctrl=\"' + id + '\"]'\n    }\n\n    var getBindingCallback = function(elem, name, vmodels) {\n        var callback = elem.getAttribute(name)\n        if (callback) {\n            for (var i = 0, vm; vm = vmodels[i++]; ) {\n                if (vm.hasOwnProperty(callback) && typeof vm[callback] === \"function\") {\n                    return vm[callback]\n                }\n            }\n        }\n    }\n\n    function executeBindings(bindings, vmodels) {\n        for (var i = 0, data; data = bindings[i++]; ) {\n            data.vmodels = vmodels\n            bindingHandlers[data.type](data, vmodels)\n            if (data.evaluator && data.element && data.element.nodeType === 1) { //移除数据绑定，防止被二次解析\n                //chrome使用removeAttributeNode移除不存在的特性节点时会报错 https://github.com/RubyLouvre/avalon/issues/99\n                data.element.removeAttribute(data.name)\n            }\n        }\n        bindings.length = 0\n    }\n\n//https://github.com/RubyLouvre/avalon/issues/636\n    var mergeTextNodes = IEVersion && window.MutationObserver ? function (elem) {\n        var node = elem.firstChild, text\n        while (node) {\n            var aaa = node.nextSibling\n            if (node.nodeType === 3) {\n                if (text) {\n                    text.nodeValue += node.nodeValue\n                    elem.removeChild(node)\n                } else {\n                    text = node\n                }\n            } else {\n                text = null\n            }\n            node = aaa\n        }\n    } : 0\n    var roneTime = /^\\s*::/\n    var rmsAttr = /ms-(\\w+)-?(.*)/\n    var priorityMap = {\n        \"if\": 10,\n        \"repeat\": 90,\n        \"data\": 100,\n        \"widget\": 110,\n        \"each\": 1400,\n        \"with\": 1500,\n        \"duplex\": 2000,\n        \"on\": 3000\n    }\n\n    var events = oneObject(\"animationend,blur,change,input,click,dblclick,focus,keydown,keypress,keyup,mousedown,mouseenter,mouseleave,mousemove,mouseout,mouseover,mouseup,scan,scroll,submit\")\n    var obsoleteAttrs = oneObject(\"value,title,alt,checked,selected,disabled,readonly,enabled\")\n    function bindingSorter(a, b) {\n        return a.priority - b.priority\n    }\n\n    function scanAttr(elem, vmodels, match) {\n        var scanNode = true\n        if (vmodels.length) {\n            var attributes = getAttributes ? getAttributes(elem) : elem.attributes\n            var bindings = []\n            var fixAttrs = []\n            var msData = {}\n            var uniq = {}\n            for (var i = 0, attr; attr = attributes[i++]; ) {\n                if (attr.specified) {\n                    if (match = attr.name.match(rmsAttr)) {\n                        //如果是以指定前缀命名的\n                        var type = match[1]\n                        var param = match[2] || \"\"\n                        var value = attr.value\n                        var name = attr.name\n                        if (uniq[name]) {//IE8下ms-repeat,ms-with BUG\n                            continue\n                        }\n                        uniq[name] = 1\n                        if (events[type]) {\n                            param = type\n                            type = \"on\"\n                        } else if (obsoleteAttrs[type]) {\n                            if (type === \"enabled\") {//吃掉ms-enabled绑定,用ms-disabled代替\n                                log(\"warning!ms-enabled或ms-attr-enabled已经被废弃\")\n                                type = \"disabled\"\n                                value = \"!(\" + value + \")\"\n                            }\n                            param = type\n                            type = \"attr\"\n                            name = \"ms-\" + type + \"-\" + param\n                            fixAttrs.push([attr.name, name, value])\n                        }\n                        msData[name] = value\n                        if (typeof bindingHandlers[type] === \"function\") {\n                            var newValue = value.replace(roneTime, \"\")\n                            var oneTime = value !== newValue\n                            var binding = {\n                                type: type,\n                                param: param,\n                                element: elem,\n                                name: name,\n                                value: newValue,\n                                oneTime: oneTime,\n                                uuid: name + \"-\" + getUid(elem),\n                                //chrome与firefox下Number(param)得到的值不一样 #855\n                                priority: (priorityMap[type] || type.charCodeAt(0) * 10) + (Number(param.replace(/\\D/g, \"\")) || 0)\n                            }\n                            if (type === \"html\" || type === \"text\") {\n                                var token = getToken(value)\n                                avalon.mix(binding, token)\n                                binding.filters = binding.filters.replace(rhasHtml, function () {\n                                    binding.type = \"html\"\n                                    binding.group = 1\n                                    return \"\"\n                                })// jshint ignore:line\n                            } else if (type === \"duplex\") {\n                                var hasDuplex = name\n                            } else if (name === \"ms-if-loop\") {\n                                binding.priority += 100\n                            }\n                            bindings.push(binding)\n                            if (type === \"widget\") {\n                                elem.msData = elem.msData || msData\n                            }\n                        }\n                    }\n                }\n            }\n            if (bindings.length) {\n                bindings.sort(bindingSorter)\n                fixAttrs.forEach(function (arr) {\n                    log(\"warning!请改用\" + arr[1] + \"代替\" + arr[0] + \"!\")\n                    elem.removeAttribute(arr[0])\n                    elem.setAttribute(arr[1], arr[2])\n                })\n                //http://bugs.jquery.com/ticket/7071\n                //在IE下对VML读取type属性,会让此元素所有属性都变成<Failed>\n                if (hasDuplex && msData[\"ms-attr-value\"] && !elem.scopeName && elem.type === \"text\") {\n                    log(\"warning!一个控件不能同时定义ms-attr-value与\" + hasDuplex)\n                }\n                for (i = 0; binding = bindings[i]; i++) {\n                    type = binding.type\n                    if (rnoscanAttrBinding.test(type)) {\n                        return executeBindings(bindings.slice(0, i + 1), vmodels)\n                    } else if (scanNode) {\n                        scanNode = !rnoscanNodeBinding.test(type)\n                    }\n                }\n                executeBindings(bindings, vmodels)\n            }\n        }\n        if (scanNode && !stopScan[elem.tagName] && rbind.test(elem.innerHTML.replace(rlt, \"<\").replace(rgt, \">\"))) {\n            mergeTextNodes && mergeTextNodes(elem)\n            scanNodeList(elem, vmodels) //扫描子孙元素\n        }\n    }\n    var rnoscanAttrBinding = /^if|widget|repeat$/\n    var rnoscanNodeBinding = /^each|with|html|include$/\n//IE67下，在循环绑定中，一个节点如果是通过cloneNode得到，自定义属性的specified为false，无法进入里面的分支，\n//但如果我们去掉scanAttr中的attr.specified检测，一个元素会有80+个特性节点（因为它不区分固有属性与自定义属性），很容易卡死页面\n    if (!W3C) {\n        var attrPool = new Cache(512)\n        var rattrs = /\\s+(ms-[^=\\s]+)(?:=(\"[^\"]*\"|'[^']*'|[^\\s>]+))?/g,\n            rquote = /^['\"]/,\n            rtag = /<\\w+\\b(?:([\"'])[^\"]*?(\\1)|[^>])*>/i,\n            ramp = /&amp;/g\n        //IE6-8解析HTML5新标签，会将它分解两个元素节点与一个文本节点\n        //<body><section>ddd</section></body>\n        //        window.onload = function() {\n        //            var body = document.body\n        //            for (var i = 0, el; el = body.children[i++]; ) {\n        //                avalon.log(el.outerHTML)\n        //            }\n        //        }\n        //依次输出<SECTION>, </SECTION>\n        var getAttributes = function (elem) {\n            var html = elem.outerHTML\n            //处理IE6-8解析HTML5新标签的情况，及<br>等半闭合标签outerHTML为空的情况\n            if (html.slice(0, 2) === \"</\" || !html.trim()) {\n                return []\n            }\n            var str = html.match(rtag)[0]\n            var attributes = [],\n                match,\n                k, v\n            var ret = attrPool.get(str)\n            if (ret) {\n                return ret\n            }\n            while (k = rattrs.exec(str)) {\n                v = k[2]\n                if (v) {\n                    v = (rquote.test(v) ? v.slice(1, -1) : v).replace(ramp, \"&\")\n                }\n                var name = k[1].toLowerCase()\n                match = name.match(rmsAttr)\n                var binding = {\n                    name: name,\n                    specified: true,\n                    value: v || \"\"\n                }\n                attributes.push(binding)\n            }\n            return attrPool.put(str, attributes)\n        }\n    }\n\n    function scanNodeList(parent, vmodels) {\n        var nodes = avalon.slice(parent.childNodes)\n        scanNodeArray(nodes, vmodels)\n    }\n\n    function scanNodeArray(nodes, vmodels) {\n        for (var i = 0, node; node = nodes[i++];) {\n            switch (node.nodeType) {\n                case 1:\n                    scanTag(node, vmodels) //扫描元素节点\n                    if (node.msCallback) {\n                        node.msCallback()\n                        node.msCallback = void 0\n                    }\n                    break\n                case 3:\n                    if(rexpr.test(node.nodeValue)){\n                        scanText(node, vmodels, i) //扫描文本节点\n                    }\n                    break\n            }\n        }\n    }\n\n\n    function scanTag(elem, vmodels, node) {\n        //扫描顺序  ms-skip(0) --> ms-important(1) --> ms-controller(2) --> ms-if(10) --> ms-repeat(100)\n        //--> ms-if-loop(110) --> ms-attr(970) ...--> ms-each(1400)-->ms-with(1500)--〉ms-duplex(2000)垫后\n        var a = elem.getAttribute(\"ms-skip\")\n        //#360 在旧式IE中 Object标签在引入Flash等资源时,可能出现没有getAttributeNode,innerHTML的情形\n        if (!elem.getAttributeNode) {\n            return log(\"warning \" + elem.tagName + \" no getAttributeNode method\")\n        }\n        var b = elem.getAttributeNode(\"ms-important\")\n        var c = elem.getAttributeNode(\"ms-controller\")\n        if (typeof a === \"string\") {\n            return\n        } else if (node = b || c) {\n            var newVmodel = avalon.vmodels[node.value]\n            if (!newVmodel) {\n                return\n            }\n            //ms-important不包含父VM，ms-controller相反\n            vmodels = node === b ? [newVmodel] : [newVmodel].concat(vmodels)\n            var name = node.name\n            elem.removeAttribute(name) //removeAttributeNode不会刷新[ms-controller]样式规则\n            avalon(elem).removeClass(name)\n            createSignalTower(elem, newVmodel)\n        }\n        scanAttr(elem, vmodels) //扫描特性节点\n    }\n    var rhasHtml = /\\|\\s*html(?:\\b|$)/,\n        r11a = /\\|\\|/g,\n        rlt = /&lt;/g,\n        rgt = /&gt;/g,\n        rstringLiteral = /(['\"])(\\\\\\1|.)+?\\1/g\n    function getToken(value) {\n        if (value.indexOf(\"|\") > 0) {\n            var scapegoat = value.replace(rstringLiteral, function (_) {\n                return Array(_.length + 1).join(\"1\")// jshint ignore:line\n            })\n            var index = scapegoat.replace(r11a, \"\\u1122\\u3344\").indexOf(\"|\") //干掉所有短路或\n            if (index > -1) {\n                return {\n                    filters: value.slice(index),\n                    value: value.slice(0, index),\n                    expr: true\n                }\n            }\n        }\n        return {\n            value: value,\n            filters: \"\",\n            expr: true\n        }\n    }\n\n    function scanExpr(str) {\n        var tokens = [],\n            value, start = 0,\n            stop\n        do {\n            stop = str.indexOf(openTag, start)\n            if (stop === -1) {\n                break\n            }\n            value = str.slice(start, stop)\n            if (value) { // {{ 左边的文本\n                tokens.push({\n                    value: value,\n                    filters: \"\",\n                    expr: false\n                })\n            }\n            start = stop + openTag.length\n            stop = str.indexOf(closeTag, start)\n            if (stop === -1) {\n                break\n            }\n            value = str.slice(start, stop)\n            if (value) { //处理{{ }}插值表达式\n                tokens.push(getToken(value))\n            }\n            start = stop + closeTag.length\n        } while (1)\n        value = str.slice(start)\n        if (value) { //}} 右边的文本\n            tokens.push({\n                value: value,\n                expr: false,\n                filters: \"\"\n            })\n        }\n        return tokens\n    }\n\n    function scanText(textNode, vmodels) {\n        var bindings = [], tokens = scanExpr(textNode.data)\n        if (tokens.length) {\n            for (var i = 0, token; token = tokens[i++]; ) {\n                var node = DOC.createTextNode(token.value) //将文本转换为文本节点，并替换原来的文本节点\n                if (token.expr) {\n                    token.value = token.value.replace(roneTime, function () {\n                        token.oneTime = true\n                        return \"\"\n                    })// jshint ignore:line\n                    token.type = \"text\"\n                    token.element = node\n                    token.filters = token.filters.replace(rhasHtml, function (a, b,c) {\n                        token.type = \"html\"\n                        return \"\"\n                    })// jshint ignore:line\n                    bindings.push(token) //收集带有插值表达式的文本\n                }\n                avalonFragment.appendChild(node)\n            }\n            textNode.parentNode.replaceChild(avalonFragment, textNode)\n            if (bindings.length)\n                executeBindings(bindings, vmodels)\n        }\n    }\n\n    var bools = [\"autofocus,autoplay,async,allowTransparency,checked,controls\",\n        \"declare,disabled,defer,defaultChecked,defaultSelected\",\n        \"contentEditable,isMap,loop,multiple,noHref,noResize,noShade\",\n        \"open,readOnly,selected\"\n    ].join(\",\")\n    var boolMap = {}\n    bools.replace(rword, function (name) {\n        boolMap[name.toLowerCase()] = name\n    })\n\n    var propMap = {//属性名映射\n        \"accept-charset\": \"acceptCharset\",\n        \"char\": \"ch\",\n        \"charoff\": \"chOff\",\n        \"class\": \"className\",\n        \"for\": \"htmlFor\",\n        \"http-equiv\": \"httpEquiv\"\n    }\n\n    var anomaly = [\"accessKey,bgColor,cellPadding,cellSpacing,codeBase,codeType,colSpan\",\n        \"dateTime,defaultValue,frameBorder,longDesc,maxLength,marginWidth,marginHeight\",\n        \"rowSpan,tabIndex,useMap,vSpace,valueType,vAlign\"\n    ].join(\",\")\n    anomaly.replace(rword, function (name) {\n        propMap[name.toLowerCase()] = name\n    })\n\n    var rnoscripts = /<noscript.*?>(?:[\\s\\S]+?)<\\/noscript>/img\n    var rnoscriptText = /<noscript.*?>([\\s\\S]+?)<\\/noscript>/im\n\n    var getXHR = function () {\n        return new (window.XMLHttpRequest || ActiveXObject)(\"Microsoft.XMLHTTP\") // jshint ignore:line\n    }\n\n    var templatePool = avalon.templateCache = {}\n\n    bindingHandlers.attr = function (data, vmodels) {\n        var value = stringifyExpr(data.value.trim())\n        if (data.type === \"include\") {\n            var elem = data.element\n            data.includeRendered = getBindingCallback(elem, \"data-include-rendered\", vmodels)\n            data.includeLoaded = getBindingCallback(elem, \"data-include-loaded\", vmodels)\n            var outer = data.includeReplace = !!avalon(elem).data(\"includeReplace\")\n            if (avalon(elem).data(\"includeCache\")) {\n                data.templateCache = {}\n            }\n            data.startInclude = DOC.createComment(\"ms-include\")\n            data.endInclude = DOC.createComment(\"ms-include-end\")\n            if (outer) {\n                data.element = data.startInclude\n                elem.parentNode.insertBefore(data.startInclude, elem)\n                elem.parentNode.insertBefore(data.endInclude, elem.nextSibling)\n            } else {\n                elem.insertBefore(data.startInclude, elem.firstChild)\n                elem.appendChild(data.endInclude)\n            }\n        }\n        data.handlerName = \"attr\" //handleName用于处理多种绑定共用同一种bindingExecutor的情况\n        parseExprProxy(value, vmodels, data)\n    }\n\n    bindingExecutors.attr = function (val, elem, data) {\n        var method = data.type,\n            attrName = data.param\n        if (method === \"css\") {\n            avalon(elem).css(attrName, val)\n        } else if (method === \"attr\") {\n\n            // ms-attr-class=\"xxx\" vm.xxx=\"aaa bbb ccc\"将元素的className设置为aaa bbb ccc\n            // ms-attr-class=\"xxx\" vm.xxx=false  清空元素的所有类名\n            // ms-attr-name=\"yyy\"  vm.yyy=\"ooo\" 为元素设置name属性\n            var toRemove = (val === false) || (val === null) || (val === void 0)\n\n            if (!W3C && propMap[attrName]) { //旧式IE下需要进行名字映射\n                attrName = propMap[attrName]\n            }\n            var bool = boolMap[attrName]\n            if (typeof elem[bool] === \"boolean\") {\n                elem[bool] = !!val //布尔属性必须使用el.xxx = true|false方式设值\n                if (!val) { //如果为false, IE全系列下相当于setAttribute(xxx,''),会影响到样式,需要进一步处理\n                    toRemove = true\n                }\n            }\n            if (toRemove) {\n                return elem.removeAttribute(attrName)\n            }\n            //SVG只能使用setAttribute(xxx, yyy), VML只能使用elem.xxx = yyy ,HTML的固有属性必须elem.xxx = yyy\n            var isInnate = rsvg.test(elem) ? false : (DOC.namespaces && isVML(elem)) ? true : attrName in elem.cloneNode(false)\n            if (isInnate) {\n                elem[attrName] = val + \"\"\n            } else {\n                elem.setAttribute(attrName, val)\n            }\n        } else if (method === \"include\" && val) {\n            var vmodels = data.vmodels\n            var rendered = data.includeRendered\n            var loaded = data.includeLoaded\n            var replace = data.includeReplace\n            var target = replace ? elem.parentNode : elem\n            var scanTemplate = function (text) {\n                if (data.vmodels === null) {\n                    return\n                }\n\n                if (loaded) {\n                    var newText = loaded.apply(target, [text].concat(vmodels))\n                    if (typeof newText === \"string\")\n                        text = newText\n                }\n                if (rendered) {\n                    checkScan(target, function () {\n                        rendered.call(target)\n                    }, NaN)\n                }\n                var lastID = data.includeLastID\n                if (data.templateCache && lastID && lastID !== val) {\n                    var lastTemplate = data.templateCache[lastID]\n                    if (!lastTemplate) {\n                        lastTemplate = data.templateCache[lastID] = DOC.createElement(\"div\")\n                        ifGroup.appendChild(lastTemplate)\n                    }\n                }\n                data.includeLastID = val\n                while (data.startInclude) {\n                    var node = data.startInclude.nextSibling\n                    if (node && node !== data.endInclude) {\n                        target.removeChild(node)\n                        if (lastTemplate)\n                            lastTemplate.appendChild(node)\n                    } else {\n                        break\n                    }\n                }\n                var dom = getTemplateNodes(data, val, text)\n                var nodes = avalon.slice(dom.childNodes)\n                target.insertBefore(dom, data.endInclude)\n                scanNodeArray(nodes, vmodels)\n            }\n\n            if (data.param === \"src\") {\n                if (typeof templatePool[val] === \"string\") {\n                    avalon.nextTick(function () {\n                        scanTemplate(templatePool[val])\n                    })\n                } else if (Array.isArray(templatePool[val])) { //#805 防止在循环绑定中发出许多相同的请求\n                    templatePool[val].push(scanTemplate)\n                } else {\n                    var xhr = getXHR()\n                    xhr.onreadystatechange = function () {\n                        if (xhr.readyState === 4) {\n                            var s = xhr.status\n                            if (s >= 200 && s < 300 || s === 304 || s === 1223) {\n                                var text = xhr.responseText\n                                for (var f = 0, fn; fn = templatePool[val][f++]; ) {\n                                    fn(text)\n                                }\n                                templatePool[val] = text\n                            }\n                        }\n                    }\n                    templatePool[val] = [scanTemplate]\n                    xhr.open(\"GET\", val, true)\n                    if (\"withCredentials\" in xhr) {\n                        xhr.withCredentials = true\n                    }\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n                    xhr.send(null)\n                }\n            } else {\n                //IE系列与够新的标准浏览器支持通过ID取得元素（firefox14+）\n                //http://tjvantoll.com/2012/07/19/dom-element-references-as-global-variables/\n                var el = val && val.nodeType === 1 ? val : DOC.getElementById(val)\n                if (el) {\n                    if (el.tagName === \"NOSCRIPT\" && !(el.innerHTML || el.fixIE78)) { //IE7-8 innerText,innerHTML都无法取得其内容，IE6能取得其innerHTML\n                        xhr = getXHR() //IE9-11与chrome的innerHTML会得到转义的内容，它们的innerText可以\n                        xhr.open(\"GET\", location, false) //谢谢Nodejs 乱炖群 深圳-纯属虚构\n                        xhr.send(null)\n                        //http://bbs.csdn.net/topics/390349046?page=1#post-393492653\n                        var noscripts = DOC.getElementsByTagName(\"noscript\")\n                        var array = (xhr.responseText || \"\").match(rnoscripts) || []\n                        var n = array.length\n                        for (var i = 0; i < n; i++) {\n                            var tag = noscripts[i]\n                            if (tag) { //IE6-8中noscript标签的innerHTML,innerText是只读的\n                                tag.style.display = \"none\" //http://haslayout.net/css/noscript-Ghost-Bug\n                                tag.fixIE78 = (array[i].match(rnoscriptText) || [\"\", \"&nbsp;\"])[1]\n                            }\n                        }\n                    }\n                    avalon.nextTick(function () {\n                        scanTemplate(el.fixIE78 || el.value || el.innerText || el.innerHTML)\n                    })\n                }\n            }\n        } else {\n            if (!root.hasAttribute && typeof val === \"string\" && (method === \"src\" || method === \"href\")) {\n                val = val.replace(/&amp;/g, \"&\") //处理IE67自动转义的问题\n            }\n            elem[method] = val\n            if (window.chrome && elem.tagName === \"EMBED\") {\n                var parent = elem.parentNode //#525  chrome1-37下embed标签动态设置src不能发生请求\n                var comment = document.createComment(\"ms-src\")\n                parent.replaceChild(comment, elem)\n                parent.replaceChild(elem, comment)\n            }\n        }\n    }\n\n    function getTemplateNodes(data, id, text) {\n        var div = data.templateCache && data.templateCache[id]\n        if (div) {\n            var dom = DOC.createDocumentFragment(),\n                firstChild\n            while (firstChild = div.firstChild) {\n                dom.appendChild(firstChild)\n            }\n            return dom\n        }\n        return avalon.parseHTML(text)\n    }\n\n//这几个指令都可以使用插值表达式，如ms-src=\"aaa/{{b}}/{{c}}.html\"\n    \"title,alt,src,value,css,include,href\".replace(rword, function (name) {\n        bindingHandlers[name] = bindingHandlers.attr\n    })\n//根据VM的属性值或表达式的值切换类名，ms-class=\"xxx yyy zzz:flag\"\n//http://www.cnblogs.com/rubylouvre/archive/2012/12/17/2818540.html\n    bindingHandlers[\"class\"] = function (binding, vmodels) {\n        var oldStyle = binding.param,\n            text = binding.value,\n            rightExpr\n        binding.handlerName = \"class\"\n        if (!oldStyle || isFinite(oldStyle)) {\n            binding.param = \"\" //去掉数字\n            var colonIndex = text.replace(rexprg, function (a) {\n                return a.replace(/./g, \"0\")\n            }).indexOf(\":\") //取得第一个冒号的位置\n            if (colonIndex === -1) { // 比如 ms-class=\"aaa bbb ccc\" 的情况\n                var className = text\n                rightExpr = true\n            } else { // 比如 ms-class-1=\"ui-state-active:checked\" 的情况\n                className = text.slice(0, colonIndex)\n                rightExpr = text.slice(colonIndex + 1)\n            }\n            if (!rexpr.test(text)) {\n                className = quote(className)\n            } else {\n                className = stringifyExpr(className)\n            }\n            binding.expr = \"[\" + className + \",\" + rightExpr + \"]\"\n        } else {\n            binding.expr = '[' + quote(oldStyle) + \",\" + text + \"]\"\n            binding.oldStyle = oldStyle\n        }\n        var method = binding.type\n        if (method === \"hover\" || method === \"active\") { //确保只绑定一次\n            if (!binding.hasBindEvent) {\n                var elem = binding.element\n                var $elem = avalon(elem)\n                var activate = \"mouseenter\" //在移出移入时切换类名\n                var abandon = \"mouseleave\"\n                if (method === \"active\") { //在聚焦失焦中切换类名\n                    elem.tabIndex = elem.tabIndex || -1\n                    activate = \"mousedown\"\n                    abandon = \"mouseup\"\n                    var fn0 = $elem.bind(\"mouseleave\", function () {\n                        binding.toggleClass && $elem.removeClass(binding.newClass)\n                    })\n                }\n            }\n\n            var fn1 = $elem.bind(activate, function () {\n                binding.toggleClass && $elem.addClass(binding.newClass)\n            })\n            var fn2 = $elem.bind(abandon, function () {\n                binding.toggleClass && $elem.removeClass(binding.newClass)\n            })\n            binding.rollback = function () {\n                $elem.unbind(\"mouseleave\", fn0)\n                $elem.unbind(activate, fn1)\n                $elem.unbind(abandon, fn2)\n            }\n            binding.hasBindEvent = true\n        }\n        parseExprProxy(binding.expr, vmodels, binding)\n    }\n\n    bindingExecutors[\"class\"] = function (arr, elem, binding) {\n        var $elem = avalon(elem)\n        binding.newClass = arr[0]\n        binding.toggleClass = !!arr[1]\n        if (binding.oldClass && binding.newClass !== binding.oldClass) {\n            $elem.removeClass(binding.oldClass)\n        }\n        binding.oldClass = binding.newClass\n        if (binding.type === \"class\") {\n            if (binding.oldStyle) {\n                $elem.toggleClass(binding.oldStyle, !!arr[1])\n            } else {\n                $elem.toggleClass(binding.newClass, binding.toggleClass)\n            }\n        }\n\n    }\n\n    \"hover,active\".replace(rword, function (method) {\n        bindingHandlers[method] = bindingHandlers[\"class\"]\n    })\n//ms-controller绑定已经在scanTag 方法中实现\n//ms-css绑定已由ms-attr绑定实现\n\n\n// bindingHandlers.data 定义在if.js\n    bindingExecutors.data = function(val, elem, data) {\n        var key = \"data-\" + data.param\n        if (val && typeof val === \"object\") {\n            elem[key] = val\n        } else {\n            elem.setAttribute(key, String(val))\n        }\n    }\n//双工绑定\n    var duplexBinding = bindingHandlers.duplex = function(data, vmodels) {\n        var elem = data.element,\n            hasCast\n        parseExprProxy(data.value, vmodels, data, 1)\n\n        data.changed = getBindingCallback(elem, \"data-duplex-changed\", vmodels) || noop\n        if (data.evaluator && data.args) {\n            var params = []\n            var casting = oneObject(\"string,number,boolean,checked\")\n            if (elem.type === \"radio\" && data.param === \"\") {\n                data.param = \"checked\"\n            }\n            if (elem.msData) {\n                elem.msData[\"ms-duplex\"] = data.value\n            }\n            data.param.replace(/\\w+/g, function(name) {\n                if (/^(checkbox|radio)$/.test(elem.type) && /^(radio|checked)$/.test(name)) {\n                    if (name === \"radio\")\n                        log(\"ms-duplex-radio已经更名为ms-duplex-checked\")\n                    name = \"checked\"\n                    data.isChecked = true\n                }\n                if (name === \"bool\") {\n                    name = \"boolean\"\n                    log(\"ms-duplex-bool已经更名为ms-duplex-boolean\")\n                } else if (name === \"text\") {\n                    name = \"string\"\n                    log(\"ms-duplex-text已经更名为ms-duplex-string\")\n                }\n                if (casting[name]) {\n                    hasCast = true\n                }\n                avalon.Array.ensure(params, name)\n            })\n            if (!hasCast) {\n                params.push(\"string\")\n            }\n            data.param = params.join(\"-\")\n            data.bound = function(type, callback) {\n                if (elem.addEventListener) {\n                    elem.addEventListener(type, callback, false)\n                } else {\n                    elem.attachEvent(\"on\" + type, callback)\n                }\n                var old = data.rollback\n                data.rollback = function() {\n                    elem.avalonSetter = null\n                    avalon.unbind(elem, type, callback)\n                    old && old()\n                }\n            }\n            for (var i in avalon.vmodels) {\n                var v = avalon.vmodels[i]\n                v.$fire(\"avalon-ms-duplex-init\", data)\n            }\n            var cpipe = data.pipe || (data.pipe = pipe)\n            cpipe(null, data, \"init\")\n            var tagName = elem.tagName\n            duplexBinding[tagName] && duplexBinding[tagName](elem, data.evaluator.apply(null, data.args), data)\n        }\n    }\n//不存在 bindingExecutors.duplex\n\n    function fixNull(val) {\n        return val == null ? \"\" : val\n    }\n    avalon.duplexHooks = {\n        checked: {\n            get: function(val, data) {\n                return !data.element.oldValue\n            }\n        },\n        string: {\n            get: function(val) { //同步到VM\n                return val\n            },\n            set: fixNull\n        },\n        \"boolean\": {\n            get: function(val) {\n                return val === \"true\"\n            },\n            set: fixNull\n        },\n        number: {\n            get: function(val, data) {\n                var number = parseFloat(val)\n                if (-val === -number) {\n                    return number\n                }\n                var arr = /strong|medium|weak/.exec(data.element.getAttribute(\"data-duplex-number\")) || [\"medium\"]\n                switch (arr[0]) {\n                    case \"strong\":\n                        return 0\n                    case \"medium\":\n                        return val === \"\" ? \"\" : 0\n                    case \"weak\":\n                        return val\n                }\n            },\n            set: fixNull\n        }\n    }\n\n    function pipe(val, data, action, e) {\n        data.param.replace(/\\w+/g, function(name) {\n            var hook = avalon.duplexHooks[name]\n            if (hook && typeof hook[action] === \"function\") {\n                val = hook[action](val, data)\n            }\n        })\n        return val\n    }\n\n    var TimerID, ribbon = []\n\n    avalon.tick = function(fn) {\n        if (ribbon.push(fn) === 1) {\n            TimerID = setInterval(ticker, 60)\n        }\n    }\n\n    function ticker() {\n        for (var n = ribbon.length - 1; n >= 0; n--) {\n            var el = ribbon[n]\n            if (el() === false) {\n                ribbon.splice(n, 1)\n            }\n        }\n        if (!ribbon.length) {\n            clearInterval(TimerID)\n        }\n    }\n\n    var watchValueInTimer = noop\n    new function() { // jshint ignore:line\n        try { //#272 IE9-IE11, firefox\n            var setters = {}\n            var aproto = HTMLInputElement.prototype\n            var bproto = HTMLTextAreaElement.prototype\n            function newSetter(value) { // jshint ignore:line\n                setters[this.tagName].call(this, value)\n                if (!this.msFocus && this.avalonSetter) {\n                    this.avalonSetter()\n                }\n            }\n            var inputProto = HTMLInputElement.prototype\n            Object.getOwnPropertyNames(inputProto) //故意引发IE6-8等浏览器报错\n            setters[\"INPUT\"] = Object.getOwnPropertyDescriptor(aproto, \"value\").set\n\n            Object.defineProperty(aproto, \"value\", {\n                set: newSetter\n            })\n            setters[\"TEXTAREA\"] = Object.getOwnPropertyDescriptor(bproto, \"value\").set\n            Object.defineProperty(bproto, \"value\", {\n                set: newSetter\n            })\n        } catch (e) {\n            //在chrome 43中 ms-duplex终于不需要使用定时器实现双向绑定了\n            // http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype\n            // https://docs.google.com/document/d/1jwA8mtClwxI-QJuHT7872Z0pxpZz8PBkf2bGAbsUtqs/edit?pli=1\n            watchValueInTimer = avalon.tick\n        }\n    } // jshint ignore:line\n    if (IEVersion) {\n        avalon.bind(DOC, \"selectionchange\", function (e) {\n            var el = DOC.activeElement || {}\n            if (!el.msFocus && el.avalonSetter) {\n                el.avalonSetter()\n            }\n        })\n    }\n    var rnoduplex = /^(file|button|reset|submit|checkbox|radio|range)$/\n//处理radio, checkbox, text, textarea, password\n    duplexBinding.INPUT = function (elem, evaluator, data) {\n        var $type = elem.type,\n            bound = data.bound,\n            $elem = avalon(elem),\n            composing = false\n\n        function callback(value) {\n            data.changed.call(this, value, data)\n        }\n\n        function compositionStart() {\n            composing = true\n        }\n\n        function compositionEnd() {\n            composing = false\n        }\n        var IE9Value\n        //当value变化时改变model的值\n        var updateVModel = function () {\n            var val = elem.value //防止递归调用形成死循环\n            if (composing || val === IE9Value) //处理中文输入法在minlengh下引发的BUG\n                return\n            var lastValue = data.pipe(val, data, \"get\")\n            if ($elem.data(\"duplexObserve\") !== false) {\n                IE9Value = val\n                evaluator(lastValue)\n                callback.call(elem, lastValue)\n            }\n        }\n        //当model变化时,它就会改变value的值\n        data.handler = function () {\n            var val = data.pipe(evaluator(), data, \"set\")  //fix #673 #1106\n            if (val !== IE9Value) {\n                var fixCaret = false\n                if (elem.msFocus) {\n                    try {\n                        var pos = getCaret(elem)\n                        if (pos.start === pos.end) {\n                            pos = pos.start\n                            fixCaret = true\n                        }\n                    } catch (e) {\n                    }\n                }\n                elem.value = IE9Value = val\n                if (fixCaret && !elem.readyOnly) {\n                    setCaret(elem, pos, pos)\n                }\n            }\n        }\n        if (data.isChecked || $type === \"radio\") {\n            var IE6 = IEVersion === 6\n            updateVModel = function () {\n                if ($elem.data(\"duplexObserve\") !== false) {\n                    var lastValue = data.pipe(elem.value, data, \"get\")\n                    evaluator(lastValue)\n                    callback.call(elem, lastValue)\n                }\n            }\n            data.handler = function () {\n                var val = evaluator()\n                var checked = data.isChecked ? !!val : val + \"\" === elem.value\n                elem.oldValue = checked\n                if (IE6) {\n                    setTimeout(function () {\n                        //IE8 checkbox, radio是使用defaultChecked控制选中状态，\n                        //并且要先设置defaultChecked后设置checked\n                        //并且必须设置延迟\n                        elem.defaultChecked = checked\n                        elem.checked = checked\n                    }, 31)\n                } else {\n                    elem.checked = checked\n                }\n            }\n            bound(\"click\", updateVModel)\n        } else if ($type === \"checkbox\") {\n            updateVModel = function () {\n                if ($elem.data(\"duplexObserve\") !== false) {\n                    var method = elem.checked ? \"ensure\" : \"remove\"\n                    var array = evaluator()\n                    if (!Array.isArray(array)) {\n                        log(\"ms-duplex应用于checkbox上要对应一个数组\")\n                        array = [array]\n                    }\n                    var val = data.pipe(elem.value, data, \"get\")\n                    avalon.Array[method](array, val)\n                    callback.call(elem, array)\n                }\n            }\n\n            data.handler = function () {\n                var array = [].concat(evaluator()) //强制转换为数组\n                var val = data.pipe(elem.value, data, \"get\")\n                elem.checked = array.indexOf(val) > -1\n            }\n            bound(W3C ? \"change\" : \"click\", updateVModel)\n        } else {\n            var events = elem.getAttribute(\"data-duplex-event\") || \"input\"\n            if (elem.attributes[\"data-event\"]) {\n                log(\"data-event指令已经废弃，请改用data-duplex-event\")\n            }\n\n            function delay(e) { // jshint ignore:line\n                setTimeout(function () {\n                    updateVModel(e)\n                })\n            }\n            events.replace(rword, function (name) {\n                switch (name) {\n                    case \"input\":\n                        if (!IEVersion) { // W3C\n                            bound(\"input\", updateVModel)\n                            //非IE浏览器才用这个\n                            bound(\"compositionstart\", compositionStart)\n                            bound(\"compositionend\", compositionEnd)\n                            bound(\"DOMAutoComplete\", updateVModel)\n                        } else {\n                            // IE下通过selectionchange事件监听IE9+点击input右边的X的清空行为，及粘贴，剪切，删除行为\n                            if (IEVersion > 8) {\n                                if(IEVersion === 9){\n                                    //IE9删除字符后再失去焦点不会同步 #1167\n                                    bound(\"keyup\", updateVModel)\n                                }\n                                //IE9使用propertychange无法监听中文输入改动\n                                bound(\"input\", updateVModel)\n                            } else {\n                                //onpropertychange事件无法区分是程序触发还是用户触发\n                                //IE6-8下第一次修改时不会触发,需要使用keydown或selectionchange修正\n                                bound(\"propertychange\", function (e) {\n                                    if (e.propertyName === \"value\") {\n                                        updateVModel()\n                                    }\n                                })\n                            }\n                            bound(\"dragend\", delay)\n                            //http://www.cnblogs.com/rubylouvre/archive/2013/02/17/2914604.html\n                            //http://www.matts411.com/post/internet-explorer-9-oninput/\n                        }\n                        break\n                    default:\n                        bound(name, updateVModel)\n                        break\n                }\n            })\n\n\n            if (!rnoduplex.test(elem.type)) {\n                if (elem.type !== \"hidden\") {\n                    bound(\"focus\", function () {\n                        elem.msFocus = true\n                    })\n                    bound(\"blur\", function () {\n                        elem.msFocus = false\n                    })\n                }\n\n                elem.avalonSetter = updateVModel //#765\n                watchValueInTimer(function () {\n                    if (root.contains(elem)) {\n                        if (!elem.msFocus ) {\n                            updateVModel()\n                        }\n                    } else if (!elem.msRetain) {\n                        return false\n                    }\n                })\n            }\n\n        }\n\n        avalon.injectBinding(data)\n        callback.call(elem, elem.value)\n    }\n    duplexBinding.TEXTAREA = duplexBinding.INPUT\n    function getCaret(ctrl) {\n        var start = NaN, end = NaN\n        //https://github.com/RobinHerbots/jquery.inputmask/blob/3.x/js/inputmask.js#L1736\n        if (ctrl.setSelectionRange) {\n            start = ctrl.selectionStart\n            end = ctrl.selectionEnd\n        } else {\n            var range = document.selection.createRange()\n            start = 0 - range.duplicate().moveStart('character', -100000)\n            end = start + range.text.length\n        }\n        return {\n            start: start,\n            end: end\n        }\n    }\n    function setCaret(ctrl, begin, end) {\n        if (!ctrl.value || ctrl.readOnly)\n            return\n        if (ctrl.createTextRange) {//IE6-8\n            var range = ctrl.createTextRange()\n            range.collapse(true)\n            range.moveStart(\"character\", begin)\n            range.select()\n        } else {\n            ctrl.selectionStart = begin\n            ctrl.selectionEnd = end\n        }\n    }\n    duplexBinding.SELECT = function(element, evaluator, data) {\n        var $elem = avalon(element)\n\n        function updateVModel() {\n            if ($elem.data(\"duplexObserve\") !== false) {\n                var val = $elem.val() //字符串或字符串数组\n                if (Array.isArray(val)) {\n                    val = val.map(function(v) {\n                        return data.pipe(v, data, \"get\")\n                    })\n                } else {\n                    val = data.pipe(val, data, \"get\")\n                }\n                if (val + \"\" !== element.oldValue) {\n                    evaluator(val)\n                }\n                data.changed.call(element, val, data)\n            }\n        }\n        data.handler = function() {\n            var val = evaluator()\n            val = val && val.$model || val\n            if (Array.isArray(val)) {\n                if (!element.multiple) {\n                    log(\"ms-duplex在<select multiple=true>上要求对应一个数组\")\n                }\n            } else {\n                if (element.multiple) {\n                    log(\"ms-duplex在<select multiple=false>不能对应一个数组\")\n                }\n            }\n            //必须变成字符串后才能比较\n            val = Array.isArray(val) ? val.map(String) : val + \"\"\n            if (val + \"\" !== element.oldValue) {\n                $elem.val(val)\n                element.oldValue = val + \"\"\n            }\n        }\n        data.bound(\"change\", updateVModel)\n        element.msCallback = function() {\n            avalon.injectBinding(data)\n            data.changed.call(element, evaluator(), data)\n        }\n    }\n// bindingHandlers.html 定义在if.js\n    bindingExecutors.html = function (val, elem, data) {\n        var isHtmlFilter = elem.nodeType !== 1\n        var parent = isHtmlFilter ? elem.parentNode : elem\n        if (!parent)\n            return\n        val = val == null ? \"\" : val\n        if (data.oldText !== val) {\n            data.oldText = val\n        } else {\n            return\n        }\n        if (elem.nodeType === 3) {\n            var signature = generateID(\"html\")\n            parent.insertBefore(DOC.createComment(signature), elem)\n            data.element = DOC.createComment(signature + \":end\")\n            parent.replaceChild(data.element, elem)\n            elem = data.element\n        }\n        if (typeof val !== \"object\") {//string, number, boolean\n            var fragment = avalon.parseHTML(String(val))\n        } else if (val.nodeType === 11) { //将val转换为文档碎片\n            fragment = val\n        } else if (val.nodeType === 1 || val.item) {\n            var nodes = val.nodeType === 1 ? val.childNodes : val.item\n            fragment = avalonFragment.cloneNode(true)\n            while (nodes[0]) {\n                fragment.appendChild(nodes[0])\n            }\n        }\n\n        nodes = avalon.slice(fragment.childNodes)\n        //插入占位符, 如果是过滤器,需要有节制地移除指定的数量,如果是html指令,直接清空\n        if (isHtmlFilter) {\n            var endValue = elem.nodeValue.slice(0, -4)\n            while (true) {\n                var node = elem.previousSibling\n                if (!node || node.nodeType === 8 && node.nodeValue === endValue) {\n                    break\n                } else {\n                    parent.removeChild(node)\n                }\n            }\n            parent.insertBefore(fragment, elem)\n        } else {\n            avalon.clearHTML(elem).appendChild(fragment)\n        }\n        scanNodeArray(nodes, data.vmodels)\n    }\n    bindingHandlers[\"if\"] =\n        bindingHandlers.data =\n            bindingHandlers.text =\n                bindingHandlers.html =\n                    function(data, vmodels) {\n                        parseExprProxy(data.value, vmodels, data)\n                    }\n\n    bindingExecutors[\"if\"] = function(val, elem, data) {\n        try {\n            if(!elem.parentNode) return\n        } catch(e) {return}\n        if (val) { //插回DOM树\n            if (elem.nodeType === 8) {\n                elem.parentNode.replaceChild(data.template, elem)\n                elem.ifRemove = null\n                //   animate.enter(data.template, elem.parentNode)\n                elem = data.element = data.template //这时可能为null\n            }\n            if (elem.getAttribute(data.name)) {\n                elem.removeAttribute(data.name)\n                scanAttr(elem, data.vmodels)\n            }\n            data.rollback = null\n        } else { //移出DOM树，并用注释节点占据原位置\n            if (elem.nodeType === 1) {\n                var node = data.element = DOC.createComment(\"ms-if\")\n                elem.parentNode.replaceChild(node, elem)\n                elem.ifRemove = node\n                //     animate.leave(elem, node.parentNode, node)\n                data.template = elem //元素节点\n                ifGroup.appendChild(elem)\n                data.rollback = function() {\n                    if (elem.parentNode === ifGroup) {\n                        ifGroup.removeChild(elem)\n                    }\n                }\n            }\n        }\n    }\n//ms-important绑定已经在scanTag 方法中实现\n//ms-include绑定已由ms-attr绑定实现\n\n    var rdash = /\\(([^)]*)\\)/\n    bindingHandlers.on = function(data, vmodels) {\n        var value = data.value\n        data.type = \"on\"\n        var eventType = data.param.replace(/-\\d+$/, \"\") // ms-on-mousemove-10\n        if (typeof bindingHandlers.on[eventType + \"Hook\"] === \"function\") {\n            bindingHandlers.on[eventType + \"Hook\"](data)\n        }\n        if (value.indexOf(\"(\") > 0 && value.indexOf(\")\") > -1) {\n            var matched = (value.match(rdash) || [\"\", \"\"])[1].trim()\n            if (matched === \"\" || matched === \"$event\") { // aaa() aaa($event)当成aaa处理\n                value = value.replace(rdash, \"\")\n            }\n        }\n        parseExprProxy(value, vmodels, data)\n    }\n\n    bindingExecutors.on = function(callback, elem, data) {\n        callback = function(e) {\n            var fn = data.evaluator || noop\n            return fn.apply(this, data.args.concat(e))\n        }\n        var eventType = data.param.replace(/-\\d+$/, \"\") // ms-on-mousemove-10\n        if (eventType === \"scan\") {\n            callback.call(elem, {\n                type: eventType\n            })\n        } else if (typeof data.specialBind === \"function\") {\n            data.specialBind(elem, callback)\n        } else {\n            var removeFn = avalon.bind(elem, eventType, callback)\n        }\n        data.rollback = function() {\n            if (typeof data.specialUnbind === \"function\") {\n                data.specialUnbind()\n            } else {\n                avalon.unbind(elem, eventType, removeFn)\n            }\n        }\n    }\n    bindingHandlers.repeat = function (data, vmodels) {\n        var type = data.type\n        parseExprProxy(data.value, vmodels, data, 1)\n        data.proxies = []\n        var freturn = false\n        try {\n            var $repeat = data.$repeat = data.evaluator.apply(0, data.args || [])\n            var xtype = avalon.type($repeat)\n            if (xtype !== \"object\" && xtype !== \"array\") {\n                freturn = true\n                avalon.log(\"warning:\" + data.value + \"只能是对象或数组\")\n            } else {\n                data.xtype = xtype\n            }\n        } catch (e) {\n            freturn = true\n        }\n        var arr = data.value.split(\".\") || []\n        if (arr.length > 1) {\n            arr.pop()\n            var n = arr[0]\n            for (var i = 0, v; v = vmodels[i++]; ) {\n                if (v && v.hasOwnProperty(n)) {\n                    var events = v[n].$events || {}\n                    events[subscribers] = events[subscribers] || []\n                    events[subscribers].push(data)\n                    break\n                }\n            }\n        }\n\n        var oldHandler = data.handler\n        data.handler = noop\n        avalon.injectBinding(data)\n        data.handler = oldHandler\n\n        var elem = data.element\n        if (elem.nodeType === 1) {\n            elem.removeAttribute(data.name)\n            data.sortedCallback = getBindingCallback(elem, \"data-with-sorted\", vmodels)\n            data.renderedCallback = getBindingCallback(elem, \"data-\" + type + \"-rendered\", vmodels)\n            var signature = generateID(type)\n            var start = DOC.createComment(signature)\n            var end = DOC.createComment(signature + \":end\")\n            data.signature = signature\n            data.template = avalonFragment.cloneNode(false)\n            if (type === \"repeat\") {\n                var parent = elem.parentNode\n                parent.replaceChild(end, elem)\n                parent.insertBefore(start, end)\n                data.template.appendChild(elem)\n            } else {\n                while (elem.firstChild) {\n                    data.template.appendChild(elem.firstChild)\n                }\n                elem.appendChild(start)\n                elem.appendChild(end)\n            }\n            data.element = end\n            data.handler = bindingExecutors.repeat\n            data.rollback = function () {\n                var elem = data.element\n                if (!elem)\n                    return\n                data.handler(\"clear\")\n            }\n        }\n\n        if (freturn) {\n            return\n        }\n\n        data.$outer = {}\n        var check0 = \"$key\"\n        var check1 = \"$val\"\n        if (Array.isArray($repeat)) {\n            check0 = \"$first\"\n            check1 = \"$last\"\n        }\n\n        for (i = 0; v = vmodels[i++]; ) {\n            if (v.hasOwnProperty(check0) && v.hasOwnProperty(check1)) {\n                data.$outer = v\n                break\n            }\n        }\n        var $events = $repeat.$events\n        var $list = ($events || {})[subscribers]\n        injectDependency($list, data)\n        if (xtype === \"object\") {\n            data.handler(\"append\")\n        } else if ($repeat.length) {\n            data.handler(\"add\", 0, $repeat.length)\n        }\n    }\n\n    bindingExecutors.repeat = function (method, pos, el) {\n        var data = this\n        if (!method && data.xtype) {\n            var old = data.$repeat\n            var neo = data.evaluator.apply(0, data.args || [])\n\n            if (data.xtype === \"array\") {\n                if (old.length === neo.length) {\n                    if (old !== neo && old.length > 0) {\n                        bindingExecutors.repeat.call(this, 'clear', pos, el)\n                    }\n                    else {\n                        return\n                    }\n                }\n                method = \"add\"\n                pos = 0\n                data.$repeat = neo\n                el = neo.length\n            } else {\n                if (keysVM(old).join(\";;\") === keysVM(neo).join(\";;\")) {\n                    return\n                }\n                method = \"append\"\n                data.$repeat = neo\n            }\n        }\n        if (method) {\n            var start, fragment\n            var end = data.element\n            var comments = getComments(data)\n            var parent = end.parentNode\n            var proxies = data.proxies\n            var transation = avalonFragment.cloneNode(false)\n            switch (method) {\n                case \"add\": //在pos位置后添加el数组（pos为插入位置,el为要插入的个数）\n                    var n = pos + el\n                    var fragments = []\n                    for (var i = pos; i < n; i++) {\n                        var proxy = eachProxyAgent(i, data)\n                        proxies.splice(i, 0, proxy)\n                        shimController(data, transation, proxy, fragments)\n                    }\n                    parent.insertBefore(transation, comments[pos] || end)\n                    for (i = 0; fragment = fragments[i++]; ) {\n                        scanNodeArray(fragment.nodes, fragment.vmodels)\n                        fragment.nodes = fragment.vmodels = null\n                    }\n\n                    break\n                case \"del\": //将pos后的el个元素删掉(pos, el都是数字)\n                    sweepNodes(comments[pos], comments[pos + el] || end)\n                    var removed = proxies.splice(pos, el)\n                    recycleProxies(removed, \"each\")\n                    break\n                case \"clear\":\n                    start = comments[0]\n                    if (start) {\n                        sweepNodes(start, end)\n                        if (data.xtype === \"object\") {\n                            parent.insertBefore(start, end)\n                        }else{\n                            recycleProxies(proxies, \"each\")\n                        }\n                    }\n                    break\n                case \"move\":\n                    start = comments[0]\n                    if (start) {\n                        var signature = start.nodeValue\n                        var rooms = []\n                        var room = [],\n                            node\n                        sweepNodes(start, end, function () {\n                            room.unshift(this)\n                            if (this.nodeValue === signature) {\n                                rooms.unshift(room)\n                                room = []\n                            }\n                        })\n                        sortByIndex(rooms, pos)\n                        sortByIndex(proxies, pos)\n                        while (room = rooms.shift()) {\n                            while (node = room.shift()) {\n                                transation.appendChild(node)\n                            }\n                        }\n                        parent.insertBefore(transation, end)\n                    }\n                    break\n                case \"index\": //将proxies中的第pos个起的所有元素重新索引\n                    var last = proxies.length - 1\n                    for (; el = proxies[pos]; pos++) {\n                        el.$index = pos\n                        el.$first = pos === 0\n                        el.$last = pos === last\n                    }\n                    return\n                case \"set\": //将proxies中的第pos个元素的VM设置为el（pos为数字，el任意）\n                    proxy = proxies[pos]\n                    if (proxy) {\n                        fireDependencies(proxy.$events[data.param || \"el\"])\n                    }\n                    break\n                case \"append\":\n                    var object = data.$repeat //原来第2参数， 被循环对象\n                    var pool = Array.isArray(proxies) ||!proxies ?  {}: proxies   //代理对象组成的hash\n                    data.proxies = pool\n                    var keys = []\n                    fragments = []\n                    for (var key in pool) {\n                        if (!object.hasOwnProperty(key)) {\n                            proxyRecycler(pool[key], withProxyPool) //去掉之前的代理VM\n                            delete(pool[key])\n                        }\n                    }\n                    for (key in object) { //得到所有键名\n                        if (object.hasOwnProperty(key) && key !== \"hasOwnProperty\") {\n                            keys.push(key)\n                        }\n                    }\n                    if (data.sortedCallback) { //如果有回调，则让它们排序\n                        var keys2 = data.sortedCallback.call(parent, keys)\n                        if (keys2 && Array.isArray(keys2) && keys2.length) {\n                            keys = keys2\n                        }\n                    }\n                    for (i = 0; key = keys[i++]; ) {\n                        if (key !== \"hasOwnProperty\") {\n                            pool[key] = withProxyAgent(pool[key], key, data)\n                            shimController(data, transation, pool[key], fragments)\n                        }\n                    }\n\n                    parent.insertBefore(transation, end)\n                    for (i = 0; fragment = fragments[i++]; ) {\n                        scanNodeArray(fragment.nodes, fragment.vmodels)\n                        fragment.nodes = fragment.vmodels = null\n                    }\n                    break\n            }\n            if (!data.$repeat || data.$repeat.hasOwnProperty(\"$lock\")) //IE6-8 VBScript对象会报错, 有时候data.$repeat不存在\n                return\n            if (method === \"clear\")\n                method = \"del\"\n            var callback = data.renderedCallback || noop,\n                args = arguments\n            if (parent.oldValue && parent.tagName === \"SELECT\") { //fix #503\n                avalon(parent).val(parent.oldValue.split(\",\"))\n            }\n            callback.apply(parent, args)\n        }\n    }\n    \"with,each\".replace(rword, function (name) {\n        bindingHandlers[name] = bindingHandlers.repeat\n    })\n\n    function shimController(data, transation, proxy, fragments) {\n        var content = data.template.cloneNode(true)\n        var nodes = avalon.slice(content.childNodes)\n        content.insertBefore(DOC.createComment(data.signature), content.firstChild)\n        transation.appendChild(content)\n        var nv = [proxy].concat(data.vmodels)\n        var fragment = {\n            nodes: nodes,\n            vmodels: nv\n        }\n        fragments.push(fragment)\n    }\n\n    function getComments(data) {\n        var ret = []\n        var nodes = data.element.parentNode.childNodes\n        for (var i = 0, node; node = nodes[i++]; ) {\n            if (node.nodeValue === data.signature) {\n                ret.push(node)\n            } else if (node.nodeValue === data.signature + \":end\") {\n                break\n            }\n        }\n        return ret\n    }\n\n\n//移除掉start与end之间的节点(保留end)\n    function sweepNodes(start, end, callback) {\n        while (true) {\n            var node = end.previousSibling\n            if (!node)\n                break\n            node.parentNode.removeChild(node)\n            callback && callback.call(node)\n            if (node === start) {\n                break\n            }\n        }\n    }\n\n// 为ms-each,ms-with, ms-repeat会创建一个代理VM，\n// 通过它们保持一个下上文，让用户能调用$index,$first,$last,$remove,$key,$val,$outer等属性与方法\n// 所有代理VM的产生,消费,收集,存放通过xxxProxyFactory,xxxProxyAgent, recycleProxies,xxxProxyPool实现\n    var withProxyPool = []\n    function withProxyFactory() {\n        var proxy = modelFactory({\n            $key: \"\",\n            $outer: {},\n            $host: {},\n            $val: {\n                get: function () {\n                    return this.$host[this.$key]\n                },\n                set: function (val) {\n                    this.$host[this.$key] = val\n                }\n            }\n        }, {\n            $val: 1\n        })\n        proxy.$id = generateID(\"$proxy$with\")\n        return proxy\n    }\n\n    function withProxyAgent(proxy, key, data) {\n        proxy = proxy || withProxyPool.pop()\n        if (!proxy) {\n            proxy = withProxyFactory()\n        } else {\n            proxy.$reinitialize()\n        }\n        var host = data.$repeat\n        proxy.$key = key\n\n        proxy.$host = host\n        proxy.$outer = data.$outer\n        if (host.$events) {\n            proxy.$events.$val = host.$events[key]\n        } else {\n            proxy.$events = {}\n        }\n        return proxy\n    }\n\n\n    function  recycleProxies(proxies) {\n        eachProxyRecycler(proxies)\n    }\n    function eachProxyRecycler(proxies) {\n        proxies.forEach(function (proxy) {\n            proxyRecycler(proxy, eachProxyPool)\n        })\n        proxies.length = 0\n    }\n\n\n    var eachProxyPool = []\n    function eachProxyFactory(name) {\n        var source = {\n            $host: [],\n            $outer: {},\n            $index: 0,\n            $first: false,\n            $last: false,\n            $remove: avalon.noop\n        }\n        source[name] = {\n            get: function () {\n                var e = this.$events\n                var array = e.$index\n                e.$index = e[name] //#817 通过$index为el收集依赖\n                try {\n                    return this.$host[this.$index]\n                } finally {\n                    e.$index = array\n                }\n            },\n            set: function (val) {\n                try {\n                    var e = this.$events\n                    var array = e.$index\n                    e.$index = []\n                    this.$host.set(this.$index, val)\n                } finally {\n                    e.$index = array\n                }\n            }\n        }\n        var second = {\n            $last: 1,\n            $first: 1,\n            $index: 1\n        }\n        var proxy = modelFactory(source, second)\n        proxy.$id = generateID(\"$proxy$each\")\n        return proxy\n    }\n\n    function eachProxyAgent(index, data) {\n        var param = data.param || \"el\",\n            proxy\n        for (var i = 0, n = eachProxyPool.length; i < n; i++) {\n            var candidate = eachProxyPool[i]\n            if (candidate && candidate.hasOwnProperty(param)) {\n                proxy = candidate\n                eachProxyPool.splice(i, 1)\n            }\n        }\n        if (!proxy) {\n            proxy = eachProxyFactory(param)\n        }\n        var host = data.$repeat\n        var last = host.length - 1\n        proxy.$index = index\n        proxy.$first = index === 0\n        proxy.$last = index === last\n        proxy.$host = host\n        proxy.$outer = data.$outer\n        proxy.$remove = function () {\n            return host.removeAt(proxy.$index)\n        }\n        return proxy\n    }\n\n\n    function proxyRecycler(proxy, proxyPool) {\n        for (var i in proxy.$events) {\n            var arr = proxy.$events[i]\n            if (Array.isArray(arr)) {\n                arr.forEach(function (data) {\n                    if (typeof data === \"object\")\n                        disposeData(data)\n                })// jshint ignore:line\n                arr.length = 0\n            }\n        }\n        proxy.$host = proxy.$outer = {}\n        if (proxyPool.unshift(proxy) > kernel.maxRepeatSize) {\n            proxyPool.pop()\n        }\n    }\n\n    /*********************************************************************\n     *                         各种指令                                  *\n     **********************************************************************/\n//ms-skip绑定已经在scanTag 方法中实现\n// bindingHandlers.text 定义在if.js\n    bindingExecutors.text = function(val, elem) {\n        val = val == null ? \"\" : val //不在页面上显示undefined null\n        if (elem.nodeType === 3) { //绑定在文本节点上\n            try { //IE对游离于DOM树外的节点赋值会报错\n                elem.data = val\n            } catch (e) {}\n        } else { //绑定在特性节点上\n            if (\"textContent\" in elem) {\n                elem.textContent = val\n            } else {\n                elem.innerText = val\n            }\n        }\n    }\n    function parseDisplay(nodeName, val) {\n        //用于取得此类标签的默认display值\n        var key = \"_\" + nodeName\n        if (!parseDisplay[key]) {\n            var node = DOC.createElement(nodeName)\n            root.appendChild(node)\n            if (W3C) {\n                val = getComputedStyle(node, null).display\n            } else {\n                val = node.currentStyle.display\n            }\n            root.removeChild(node)\n            parseDisplay[key] = val\n        }\n        return parseDisplay[key]\n    }\n\n    avalon.parseDisplay = parseDisplay\n\n    bindingHandlers.visible = function (data, vmodels) {\n        parseExprProxy(data.value, vmodels, data)\n    }\n\n    bindingExecutors.visible = function (val, elem, binding) {\n        if (val) {\n            elem.style.display = binding.display || \"\"\n            if (avalon(elem).css(\"display\") === \"none\") {\n                elem.style.display = binding.display = parseDisplay(elem.nodeName)\n            }\n        } else {\n            elem.style.display = \"none\"\n        }\n    }\n    bindingHandlers.widget = function(data, vmodels) {\n        var args = data.value.match(rword)\n        var elem = data.element\n        var widget = args[0]\n        var id = args[1]\n        if (!id || id === \"$\") { //没有定义或为$时，取组件名+随机数\n            id = generateID(widget)\n        }\n        var optName = args[2] || widget //没有定义，取组件名\n        var constructor = avalon.ui[widget]\n        if (typeof constructor === \"function\") { //ms-widget=\"tabs,tabsAAA,optname\"\n            vmodels = elem.vmodels || vmodels\n            for (var i = 0, v; v = vmodels[i++];) {\n                if (v.hasOwnProperty(optName) && typeof v[optName] === \"object\") {\n                    var vmOptions = v[optName]\n                    vmOptions = vmOptions.$model || vmOptions\n                    break\n                }\n            }\n            if (vmOptions) {\n                var wid = vmOptions[widget + \"Id\"]\n                if (typeof wid === \"string\") {\n                    log(\"warning!不再支持\" + widget + \"Id\")\n                    id = wid\n                }\n            }\n            //抽取data-tooltip-text、data-tooltip-attr属性，组成一个配置对象\n            var widgetData = avalon.getWidgetData(elem, widget)\n            data.value = [widget, id, optName].join(\",\")\n            data[widget + \"Id\"] = id\n            data.evaluator = noop\n            elem.msData[\"ms-widget-id\"] = id\n            var options = data[widget + \"Options\"] = avalon.mix({}, constructor.defaults, vmOptions || {}, widgetData)\n            elem.removeAttribute(\"ms-widget\")\n            var vmodel = constructor(elem, data, vmodels) || {} //防止组件不返回VM\n            if (vmodel.$id) {\n                avalon.vmodels[id] = vmodel\n                createSignalTower(elem, vmodel)\n                try {\n                    vmodel.$init(function() {\n                        avalon.scan(elem, [vmodel].concat(vmodels))\n                        if (typeof options.onInit === \"function\") {\n                            options.onInit.call(elem, vmodel, options, vmodels)\n                        }\n                    })\n                } catch (e) {log(e)}\n                data.rollback = function() {\n                    try {\n                        vmodel.$remove()\n                        vmodel.widgetElement = null // 放到$remove后边\n                    } catch (e) {}\n                    elem.msData = {}\n                    delete avalon.vmodels[vmodel.$id]\n                }\n                injectDisposeQueue(data, widgetList)\n                if (window.chrome) {\n                    elem.addEventListener(\"DOMNodeRemovedFromDocument\", function() {\n                        setTimeout(rejectDisposeQueue)\n                    })\n                }\n            } else {\n                avalon.scan(elem, vmodels)\n            }\n        } else if (vmodels.length) { //如果该组件还没有加载，那么保存当前的vmodels\n            elem.vmodels = vmodels\n        }\n    }\n    var widgetList = []\n//不存在 bindingExecutors.widget\n    /*********************************************************************\n     *                             自带过滤器                            *\n     **********************************************************************/\n    var rscripts = /<script[^>]*>([\\S\\s]*?)<\\/script\\s*>/gim\n    var ron = /\\s+(on[^=\\s]+)(?:=(\"[^\"]*\"|'[^']*'|[^\\s>]+))?/g\n    var ropen = /<\\w+\\b(?:([\"'])[^\"]*?(\\1)|[^>])*>/ig\n    var rsanitize = {\n        a: /\\b(href)\\=(\"javascript[^\"]*\"|'javascript[^']*')/ig,\n        img: /\\b(src)\\=(\"javascript[^\"]*\"|'javascript[^']*')/ig,\n        form: /\\b(action)\\=(\"javascript[^\"]*\"|'javascript[^']*')/ig\n    }\n    var rsurrogate = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g\n    var rnoalphanumeric = /([^\\#-~| |!])/g;\n\n    function numberFormat(number, decimals, point, thousands) {\n        //form http://phpjs.org/functions/number_format/\n        //number\t必需，要格式化的数字\n        //decimals\t可选，规定多少个小数位。\n        //point\t可选，规定用作小数点的字符串（默认为 . ）。\n        //thousands\t可选，规定用作千位分隔符的字符串（默认为 , ），如果设置了该参数，那么所有其他参数都是必需的。\n        number = (number + '')\n            .replace(/[^0-9+\\-Ee.]/g, '')\n        var n = !isFinite(+number) ? 0 : +number,\n            prec = !isFinite(+decimals) ? 3 : Math.abs(decimals),\n            sep = thousands || \",\",\n            dec = point || \".\",\n            s = '',\n            toFixedFix = function(n, prec) {\n                var k = Math.pow(10, prec)\n                return '' + (Math.round(n * k) / k)\n                        .toFixed(prec)\n            }\n        // Fix for IE parseFloat(0.55).toFixed(0) = 0;\n        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n))\n            .split('.')\n        if (s[0].length > 3) {\n            s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep)\n        }\n        if ((s[1] || '')\n                .length < prec) {\n            s[1] = s[1] || ''\n            s[1] += new Array(prec - s[1].length + 1)\n                .join('0')\n        }\n        return s.join(dec)\n    }\n\n\n    var filters = avalon.filters = {\n        uppercase: function(str) {\n            return str.toUpperCase()\n        },\n        lowercase: function(str) {\n            return str.toLowerCase()\n        },\n        truncate: function(str, length, truncation) {\n            //length，新字符串长度，truncation，新字符串的结尾的字段,返回新字符串\n            length = length || 30\n            truncation = typeof truncation === \"string\" ?  truncation : \"...\"\n            return str.length > length ? str.slice(0, length - truncation.length) + truncation : String(str)\n        },\n        $filter: function(val) {\n            for (var i = 1, n = arguments.length; i < n; i++) {\n                var array = arguments[i]\n                var fn = avalon.filters[array[0]]\n                if (typeof fn === \"function\") {\n                    var arr = [val].concat(array.slice(1))\n                    val = fn.apply(null, arr)\n                }\n            }\n            return val\n        },\n        camelize: camelize,\n        //https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n        //    <a href=\"javasc&NewLine;ript&colon;alert('XSS')\">chrome</a>\n        //    <a href=\"data:text/html;base64, PGltZyBzcmM9eCBvbmVycm9yPWFsZXJ0KDEpPg==\">chrome</a>\n        //    <a href=\"jav\tascript:alert('XSS');\">IE67chrome</a>\n        //    <a href=\"jav&#x09;ascript:alert('XSS');\">IE67chrome</a>\n        //    <a href=\"jav&#x0A;ascript:alert('XSS');\">IE67chrome</a>\n        sanitize: function(str) {\n            return str.replace(rscripts, \"\").replace(ropen, function(a, b) {\n                var match = a.toLowerCase().match(/<(\\w+)\\s/)\n                if (match) { //处理a标签的href属性，img标签的src属性，form标签的action属性\n                    var reg = rsanitize[match[1]]\n                    if (reg) {\n                        a = a.replace(reg, function(s, name, value) {\n                            var quote = value.charAt(0)\n                            return name + \"=\" + quote + \"javascript:void(0)\" + quote// jshint ignore:line\n                        })\n                    }\n                }\n                return a.replace(ron, \" \").replace(/\\s+/g, \" \") //移除onXXX事件\n            })\n        },\n        escape: function(str) {\n            //将字符串经过 str 转义得到适合在页面中显示的内容, 例如替换 < 为 &lt\n            return String(str).\n                replace(/&/g, '&amp;').\n                replace(rsurrogate, function(value) {\n                    var hi = value.charCodeAt(0)\n                    var low = value.charCodeAt(1)\n                    return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';'\n                }).\n                replace(rnoalphanumeric, function(value) {\n                    return '&#' + value.charCodeAt(0) + ';'\n                }).\n                replace(/</g, '&lt;').\n                replace(/>/g, '&gt;')\n        },\n        currency: function(amount, symbol, fractionSize) {\n            return (symbol || \"\\uFFE5\") + numberFormat(amount, isFinite(fractionSize) ? fractionSize : 2)\n        },\n        number: numberFormat\n    }\n    /*\n     'yyyy': 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n     'yy': 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n     'y': 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n     'MMMM': Month in year (January-December)\n     'MMM': Month in year (Jan-Dec)\n     'MM': Month in year, padded (01-12)\n     'M': Month in year (1-12)\n     'dd': Day in month, padded (01-31)\n     'd': Day in month (1-31)\n     'EEEE': Day in Week,(Sunday-Saturday)\n     'EEE': Day in Week, (Sun-Sat)\n     'HH': Hour in day, padded (00-23)\n     'H': Hour in day (0-23)\n     'hh': Hour in am/pm, padded (01-12)\n     'h': Hour in am/pm, (1-12)\n     'mm': Minute in hour, padded (00-59)\n     'm': Minute in hour (0-59)\n     'ss': Second in minute, padded (00-59)\n     's': Second in minute (0-59)\n     'a': am/pm marker\n     'Z': 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n     format string can also be one of the following predefined localizable formats:\n\n     'medium': equivalent to 'MMM d, y h:mm:ss a' for en_US locale (e.g. Sep 3, 2010 12:05:08 pm)\n     'short': equivalent to 'M/d/yy h:mm a' for en_US locale (e.g. 9/3/10 12:05 pm)\n     'fullDate': equivalent to 'EEEE, MMMM d,y' for en_US locale (e.g. Friday, September 3, 2010)\n     'longDate': equivalent to 'MMMM d, y' for en_US locale (e.g. September 3, 2010\n     'mediumDate': equivalent to 'MMM d, y' for en_US locale (e.g. Sep 3, 2010)\n     'shortDate': equivalent to 'M/d/yy' for en_US locale (e.g. 9/3/10)\n     'mediumTime': equivalent to 'h:mm:ss a' for en_US locale (e.g. 12:05:08 pm)\n     'shortTime': equivalent to 'h:mm a' for en_US locale (e.g. 12:05 pm)\n     */\n    new function() {// jshint ignore:line\n        function toInt(str) {\n            return parseInt(str, 10) || 0\n        }\n\n        function padNumber(num, digits, trim) {\n            var neg = \"\"\n            if (num < 0) {\n                neg = '-'\n                num = -num\n            }\n            num = \"\" + num\n            while (num.length < digits)\n                num = \"0\" + num\n            if (trim)\n                num = num.substr(num.length - digits)\n            return neg + num\n        }\n\n        function dateGetter(name, size, offset, trim) {\n            return function(date) {\n                var value = date[\"get\" + name]()\n                if (offset > 0 || value > -offset)\n                    value += offset\n                if (value === 0 && offset === -12) {\n                    value = 12\n                }\n                return padNumber(value, size, trim)\n            }\n        }\n\n        function dateStrGetter(name, shortForm) {\n            return function(date, formats) {\n                var value = date[\"get\" + name]()\n                var get = (shortForm ? (\"SHORT\" + name) : name).toUpperCase()\n                return formats[get][value]\n            }\n        }\n\n        function timeZoneGetter(date) {\n            var zone = -1 * date.getTimezoneOffset()\n            var paddedZone = (zone >= 0) ? \"+\" : \"\"\n            paddedZone += padNumber(Math[zone > 0 ? \"floor\" : \"ceil\"](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2)\n            return paddedZone\n        }\n        //取得上午下午\n\n        function ampmGetter(date, formats) {\n            return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1]\n        }\n        var DATE_FORMATS = {\n            yyyy: dateGetter(\"FullYear\", 4),\n            yy: dateGetter(\"FullYear\", 2, 0, true),\n            y: dateGetter(\"FullYear\", 1),\n            MMMM: dateStrGetter(\"Month\"),\n            MMM: dateStrGetter(\"Month\", true),\n            MM: dateGetter(\"Month\", 2, 1),\n            M: dateGetter(\"Month\", 1, 1),\n            dd: dateGetter(\"Date\", 2),\n            d: dateGetter(\"Date\", 1),\n            HH: dateGetter(\"Hours\", 2),\n            H: dateGetter(\"Hours\", 1),\n            hh: dateGetter(\"Hours\", 2, -12),\n            h: dateGetter(\"Hours\", 1, -12),\n            mm: dateGetter(\"Minutes\", 2),\n            m: dateGetter(\"Minutes\", 1),\n            ss: dateGetter(\"Seconds\", 2),\n            s: dateGetter(\"Seconds\", 1),\n            sss: dateGetter(\"Milliseconds\", 3),\n            EEEE: dateStrGetter(\"Day\"),\n            EEE: dateStrGetter(\"Day\", true),\n            a: ampmGetter,\n            Z: timeZoneGetter\n        }\n        var rdateFormat = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/\n        var raspnetjson = /^\\/Date\\((\\d+)\\)\\/$/\n        filters.date = function(date, format) {\n            var locate = filters.date.locate,\n                text = \"\",\n                parts = [],\n                fn, match\n            format = format || \"mediumDate\"\n            format = locate[format] || format\n            if (typeof date === \"string\") {\n                if (/^\\d+$/.test(date)) {\n                    date = toInt(date)\n                } else if (raspnetjson.test(date)) {\n                    date = +RegExp.$1\n                } else {\n                    var trimDate = date.trim()\n                    var dateArray = [0, 0, 0, 0, 0, 0, 0]\n                    var oDate = new Date(0)\n                    //取得年月日\n                    trimDate = trimDate.replace(/^(\\d+)\\D(\\d+)\\D(\\d+)/, function(_, a, b, c) {\n                        var array = c.length === 4 ? [c, a, b] : [a, b, c]\n                        dateArray[0] = toInt(array[0])     //年\n                        dateArray[1] = toInt(array[1]) - 1 //月\n                        dateArray[2] = toInt(array[2])     //日\n                        return \"\"\n                    })\n                    var dateSetter = oDate.setFullYear\n                    var timeSetter = oDate.setHours\n                    trimDate = trimDate.replace(/[T\\s](\\d+):(\\d+):?(\\d+)?\\.?(\\d)?/, function(_, a, b, c, d) {\n                        dateArray[3] = toInt(a) //小时\n                        dateArray[4] = toInt(b) //分钟\n                        dateArray[5] = toInt(c) //秒\n                        if (d) {                //毫秒\n                            dateArray[6] = Math.round(parseFloat(\"0.\" + d) * 1000)\n                        }\n                        return \"\"\n                    })\n                    var tzHour = 0\n                    var tzMin = 0\n                    trimDate = trimDate.replace(/Z|([+-])(\\d\\d):?(\\d\\d)/, function(z, symbol, c, d) {\n                        dateSetter = oDate.setUTCFullYear\n                        timeSetter = oDate.setUTCHours\n                        if (symbol) {\n                            tzHour = toInt(symbol + c)\n                            tzMin = toInt(symbol + d)\n                        }\n                        return \"\"\n                    })\n\n                    dateArray[3] -= tzHour\n                    dateArray[4] -= tzMin\n                    dateSetter.apply(oDate, dateArray.slice(0, 3))\n                    timeSetter.apply(oDate, dateArray.slice(3))\n                    date = oDate\n                }\n            }\n            if (typeof date === \"number\") {\n                date = new Date(date)\n            }\n            if (avalon.type(date) !== \"date\") {\n                return\n            }\n            while (format) {\n                match = rdateFormat.exec(format)\n                if (match) {\n                    parts = parts.concat(match.slice(1))\n                    format = parts.pop()\n                } else {\n                    parts.push(format)\n                    format = null\n                }\n            }\n            parts.forEach(function(value) {\n                fn = DATE_FORMATS[value]\n                text += fn ? fn(date, locate) : value.replace(/(^'|'$)/g, \"\").replace(/''/g, \"'\")\n            })\n            return text\n        }\n        var locate = {\n            AMPMS: {\n                0: \"上午\",\n                1: \"下午\"\n            },\n            DAY: {\n                0: \"星期日\",\n                1: \"星期一\",\n                2: \"星期二\",\n                3: \"星期三\",\n                4: \"星期四\",\n                5: \"星期五\",\n                6: \"星期六\"\n            },\n            MONTH: {\n                0: \"1月\",\n                1: \"2月\",\n                2: \"3月\",\n                3: \"4月\",\n                4: \"5月\",\n                5: \"6月\",\n                6: \"7月\",\n                7: \"8月\",\n                8: \"9月\",\n                9: \"10月\",\n                10: \"11月\",\n                11: \"12月\"\n            },\n            SHORTDAY: {\n                \"0\": \"周日\",\n                \"1\": \"周一\",\n                \"2\": \"周二\",\n                \"3\": \"周三\",\n                \"4\": \"周四\",\n                \"5\": \"周五\",\n                \"6\": \"周六\"\n            },\n            fullDate: \"y年M月d日EEEE\",\n            longDate: \"y年M月d日\",\n            medium: \"yyyy-M-d H:mm:ss\",\n            mediumDate: \"yyyy-M-d\",\n            mediumTime: \"H:mm:ss\",\n            \"short\": \"yy-M-d ah:mm\",\n            shortDate: \"yy-M-d\",\n            shortTime: \"ah:mm\"\n        }\n        locate.SHORTMONTH = locate.MONTH\n        filters.date.locate = locate\n    }// jshint ignore:line\n    /*********************************************************************\n     *                     END                                  *\n     **********************************************************************/\n    new function () {\n        avalon.config({\n            loader: false\n        })\n        var fns = [], loaded = DOC.readyState === \"complete\", fn\n        function flush(f) {\n            loaded = 1\n            while (f = fns.shift())\n                f()\n        }\n\n        avalon.bind(DOC, \"DOMContentLoaded\", fn = function () {\n            avalon.unbind(DOC, \"DOMContentLoaded\", fn)\n            flush()\n        })\n\n        var id = setInterval(function () {\n            if (document.readyState === \"complete\" && document.body) {\n                clearInterval(id)\n                flush()\n            }\n        }, 50)\n\n        avalon.ready = function (fn) {\n            loaded ? fn(avalon) : fns.push(fn)\n        }\n        avalon.ready(function () {\n            avalon.scan(DOC.body)\n        })\n    }\n\n\n// Register as a named AMD module, since avalon can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase avalon is used because AMD module names are\n// derived from file names, and Avalon is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of avalon, it will work.\n\n// Note that for maximum portability, libraries that are not avalon should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. avalon is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n    if (typeof define === \"function\" && define.amd) {\n        define(\"avalon\", [], function() {\n            return avalon\n        })\n    }\n// Map over avalon in case of overwrite\n    var _avalon = window.avalon\n    avalon.noConflict = function(deep) {\n        if (deep && window.avalon === avalon) {\n            window.avalon = _avalon\n        }\n        return avalon\n    }\n// Expose avalon identifiers, even in AMD\n// and CommonJS for browser emulators\n    if (noGlobal === void 0) {\n        window.avalon = avalon\n    }\n\n    return avalon\n\n}));\n\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ }
/******/ ]);